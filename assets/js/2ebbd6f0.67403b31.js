"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[5028],{3764:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var i=l(4848),s=l(8453);const t={},a="Local Development",r={id:"guides/local-development",title:"Local Development",description:"Prerequisites",source:"@site/docs/guides/local-development.md",sourceDirName:"guides",slug:"/guides/local-development",permalink:"/eliza/docs/guides/local-development",draft:!1,unlisted:!1,editUrl:"https://github.com/ai16z/eliza/tree/main/docs/docs/guides/local-development.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Secrets Management",permalink:"/eliza/docs/guides/secrets-management"},next:{title:"Fine-tuning",permalink:"/eliza/docs/advanced/fine-tuning"}},o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Initial Setup",id:"initial-setup",level:2},{value:"1. Clone and Install",id:"1-clone-and-install",level:3},{value:"2. Environment Configuration",id:"2-environment-configuration",level:3},{value:"3. Local Model Setup",id:"3-local-model-setup",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"1. Running the Development Server",id:"1-running-the-development-server",level:3},{value:"2. Testing in Shell Mode",id:"2-testing-in-shell-mode",level:3},{value:"3. Custom Actions Development",id:"3-custom-actions-development",level:3},{value:"Database Options",id:"database-options",level:2},{value:"SQLite (Recommended for Development)",id:"sqlite-recommended-for-development",level:3},{value:"In-Memory Database (for Testing)",id:"in-memory-database-for-testing",level:3},{value:"GPU Acceleration",id:"gpu-acceleration",level:2},{value:"Debugging Tips",id:"debugging-tips",level:2},{value:"1. Enable Debug Logging",id:"1-enable-debug-logging",level:3},{value:"2. VS Code Launch Configuration",id:"2-vs-code-launch-configuration",level:3},{value:"3. Common Issues",id:"3-common-issues",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Development Best Practices",id:"development-best-practices",level:2},{value:"Additional Tools",id:"additional-tools",level:2},{value:"Character Development",id:"character-development",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"local-development",children:"Local Development"})}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before starting local development, ensure you have:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Node.js 22 or higher installed"}),"\n",(0,i.jsx)(n.li,{children:"pnpm package manager installed"}),"\n",(0,i.jsx)(n.li,{children:"Git for version control"}),"\n",(0,i.jsx)(n.li,{children:"Code editor (VS Code recommended)"}),"\n",(0,i.jsx)(n.li,{children:"CUDA Toolkit (optional, for GPU acceleration)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"initial-setup",children:"Initial Setup"}),"\n",(0,i.jsx)(n.h3,{id:"1-clone-and-install",children:"1. Clone and Install"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Clone the repository\ngit clone https://github.com/ai16z/eliza.git\ncd eliza\n\n# Install dependencies\npnpm install\n\n# Install optional Sharp package if needed\npnpm install --include=optional sharp\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-environment-configuration",children:"2. Environment Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Copy the example environment file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp .env.example .env\n"})}),"\n",(0,i.jsx)(n.p,{children:"Configure essential variables for local development:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Minimum required for local testing\nOPENAI_API_KEY=sk-*           # Optional, for OpenAI features\nX_SERVER_URL=                 # Leave blank for local inference\nXAI_API_KEY=                  # Leave blank for local inference\nXAI_MODEL=meta-llama/Llama-3.1-7b-instruct  # Choose your model\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-local-model-setup",children:"3. Local Model Setup"}),"\n",(0,i.jsx)(n.p,{children:"For local inference without API dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install CUDA support if you have an NVIDIA GPU\nnpx --no node-llama-cpp source download --gpu cuda\n\n# The system will automatically download the selected model\n# from Hugging Face on first run\n"})}),"\n",(0,i.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,i.jsx)(n.h3,{id:"1-running-the-development-server",children:"1. Running the Development Server"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Start with default character\npnpm run dev\n\n# Start with specific character(s)\npnpm run dev --characters="characters/your-character.json"\n\n# Start with multiple characters\npnpm run dev --characters="characters/char1.json,characters/char2.json"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-testing-in-shell-mode",children:"2. Testing in Shell Mode"}),"\n",(0,i.jsx)(n.p,{children:"Open a new terminal to interact with your agent:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm run shell\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-custom-actions-development",children:"3. Custom Actions Development"}),"\n",(0,i.jsx)(n.p,{children:"Create custom actions without modifying core files:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create custom actions directory\nmkdir custom_actions\n\n# Create your action file\ntouch custom_actions/myAction.ts\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Register your action in ",(0,i.jsx)(n.code,{children:"elizaConfig.yaml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"actions:\n  - name: myAction\n    path: ./custom_actions/myAction.ts\n"})}),"\n",(0,i.jsx)(n.h2,{id:"database-options",children:"Database Options"}),"\n",(0,i.jsx)(n.h3,{id:"sqlite-recommended-for-development",children:"SQLite (Recommended for Development)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { SqliteDatabaseAdapter } from '@your-org/agent-framework/adapters';\nimport Database from 'better-sqlite3';\n\nconst db = new SqliteDatabaseAdapter(new Database(\"./dev.db\"));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"in-memory-database-for-testing",children:"In-Memory Database (for Testing)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { SqlJsDatabaseAdapter } from '@your-org/agent-framework/adapters';\n\nconst db = new SqlJsDatabaseAdapter(new Database(\":memory:\"));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"gpu-acceleration",children:"GPU Acceleration"}),"\n",(0,i.jsx)(n.p,{children:"For NVIDIA GPU users:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Install CUDA Toolkit with cuDNN and cuBLAS"}),"\n",(0,i.jsx)(n.li,{children:"Set environment variables:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"CUDA_PATH=/usr/local/cuda  # Windows: typically C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0\n"})}),"\n",(0,i.jsx)(n.h2,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,i.jsx)(n.h3,{id:"1-enable-debug-logging",children:"1. Enable Debug Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Add to your .env file\nDEBUG=eliza:*\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-vs-code-launch-configuration",children:"2. VS Code Launch Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:".vscode/launch.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "type": "node",\n      "request": "launch",\n      "name": "Debug Eliza",\n      "skipFiles": ["<node_internals>/**"],\n      "program": "${workspaceFolder}/src/index.ts",\n      "runtimeArgs": ["-r", "ts-node/register"],\n      "env": {\n        "DEBUG": "eliza:*"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-common-issues",children:"3. Common Issues"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Memory Issues:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Increase Node.js memory limit if needed\nNODE_OPTIONS="--max-old-space-size=8192" pnpm run dev\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Model Download Issues:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Clear model cache\nrm -rf ./models/*\n# Restart with fresh download\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all tests\npnpm test\n\n# Run specific test file\npnpm test tests/your-test.test.ts\n\n# Run with coverage\npnpm test:coverage\n"})}),"\n",(0,i.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Start test environment\npnpm run dev:test\n\n# Run integration tests\npnpm test:integration\n"})}),"\n",(0,i.jsx)(n.h2,{id:"development-best-practices",children:"Development Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Version Control"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create feature branches"}),"\n",(0,i.jsx)(n.li,{children:"Follow conventional commits"}),"\n",(0,i.jsx)(n.li,{children:"Keep PRs focused and manageable"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Code Organization"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Place custom actions in ",(0,i.jsx)(n.code,{children:"custom_actions/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Keep character files in ",(0,i.jsx)(n.code,{children:"characters/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Store test data in ",(0,i.jsx)(n.code,{children:"tests/fixtures/"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Performance"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use SQLite for development"}),"\n",(0,i.jsx)(n.li,{children:"Enable GPU acceleration when possible"}),"\n",(0,i.jsx)(n.li,{children:"Monitor memory usage"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write unit tests for new features"}),"\n",(0,i.jsx)(n.li,{children:"Test with multiple model providers"}),"\n",(0,i.jsx)(n.li,{children:"Verify character behavior in shell"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"additional-tools",children:"Additional Tools"}),"\n",(0,i.jsx)(n.h3,{id:"character-development",children:"Character Development"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate character from Twitter data\nnpx tweets2character\n\n# Convert documents to knowledge base\nnpx folder2knowledge <path/to/folder>\n\n# Add knowledge to character\nnpx knowledge2character <character-file> <knowledge-file>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Remember to regularly update dependencies and test your changes across different environments and configurations."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>a,x:()=>r});var i=l(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);