"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[3726],{7119:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var t=i(4848),s=i(8453);const r={},a="Basic Usage Guide",l={id:"guides/basic-usage",title:"Basic Usage Guide",description:"Overview",source:"@site/docs/guides/basic-usage.md",sourceDirName:"guides",slug:"/guides/basic-usage",permalink:"/eliza/docs/guides/basic-usage",draft:!1,unlisted:!1,editUrl:"https://github.com/ai16z/eliza/tree/main/docs/docs/guides/basic-usage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Evaluators",permalink:"/eliza/docs/core/evaluators"},next:{title:"Configuration Guide",permalink:"/eliza/docs/guides/configuration"}},c={},o=[{value:"Overview",id:"overview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:3},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Agents",id:"agents",level:3},{value:"Clients",id:"clients",level:3},{value:"Actions",id:"actions",level:3},{value:"Providers",id:"providers",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Chat Interactions",id:"chat-interactions",level:3},{value:"Voice Integration",id:"voice-integration",level:3},{value:"Media Processing",id:"media-processing",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Character Configuration",id:"character-configuration",level:3},{value:"Runtime Settings",id:"runtime-settings",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Example Implementation",id:"example-implementation",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"basic-usage-guide",children:"Basic Usage Guide"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"This guide covers the fundamental concepts and basic usage of the agent framework. We'll explore how to initialize and configure agents, handle different types of interactions, and leverage core capabilities."}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"First, install the package using npm or pnpm:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @your-org/agent-framework\n# or\npnpm install @your-org/agent-framework\n"})}),"\n",(0,t.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,t.jsx)(n.p,{children:"Here's a minimal example to create and start an agent:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { AgentRuntime, createAgentRuntime } from \'@your-org/agent-framework\';\nimport { SqliteDatabaseAdapter } from \'@your-org/agent-framework/adapters\';\n\n// Initialize database\nconst db = new SqliteDatabaseAdapter(new Database("./db.sqlite"));\n\n// Create runtime with basic configuration\nconst runtime = await createAgentRuntime({\n  character: {\n    name: "Assistant",\n    modelProvider: "anthropic",\n    // Add character details\n  },\n  db,\n  token: process.env.API_TOKEN\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,t.jsx)(n.h3,{id:"agents",children:"Agents"}),"\n",(0,t.jsx)(n.p,{children:"Agents are autonomous entities that can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Process incoming messages"}),"\n",(0,t.jsx)(n.li,{children:"Generate contextual responses"}),"\n",(0,t.jsx)(n.li,{children:"Take actions based on input"}),"\n",(0,t.jsx)(n.li,{children:"Maintain conversation state"}),"\n",(0,t.jsx)(n.li,{children:"Handle multiple communication channels"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"clients",children:"Clients"}),"\n",(0,t.jsx)(n.p,{children:"The framework supports multiple client types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Discord"}),"\n",(0,t.jsx)(n.li,{children:"Telegram"}),"\n",(0,t.jsx)(n.li,{children:"Twitter"}),"\n",(0,t.jsx)(n.li,{children:"Direct API"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Each client handles platform-specific message formatting and interaction patterns."}),"\n",(0,t.jsx)(n.h3,{id:"actions",children:"Actions"}),"\n",(0,t.jsx)(n.p,{children:"Actions are discrete tasks that agents can perform:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const action = {\n  name: "SUMMARIZE",\n  description: "Summarize content or conversations",\n  handler: async (runtime, message, state) => {\n    // Action implementation\n  }\n};\n\nruntime.registerAction(action);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"providers",children:"Providers"}),"\n",(0,t.jsx)(n.p,{children:"Providers supply contextual information to agents:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Time awareness"}),"\n",(0,t.jsx)(n.li,{children:"User relationships"}),"\n",(0,t.jsx)(n.li,{children:"System state"}),"\n",(0,t.jsx)(n.li,{children:"External data sources"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,t.jsx)(n.h3,{id:"chat-interactions",children:"Chat Interactions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Handle incoming chat message\nruntime.on('message', async (message) => {\n  const response = await runtime.handleMessage(message);\n  // Process response\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"voice-integration",children:"Voice Integration"}),"\n",(0,t.jsx)(n.p,{children:"For platforms supporting voice (e.g., Discord):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Handle voice channel join\nruntime.on('voiceStateUpdate', async (oldState, newState) => {\n  if (newState.channelId) {\n    await runtime.joinVoiceChannel(newState.channelId);\n  }\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"media-processing",children:"Media Processing"}),"\n",(0,t.jsx)(n.p,{children:"The framework can handle various media types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Images (with description generation)"}),"\n",(0,t.jsx)(n.li,{children:"Audio (with transcription)"}),"\n",(0,t.jsx)(n.li,{children:"Documents (with text extraction)"}),"\n",(0,t.jsx)(n.li,{children:"Videos (with summarization)"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Process attachment\nconst media = await runtime.processAttachment({\n  type: "image",\n  url: "https://example.com/image.jpg"\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsx)(n.h3,{id:"character-configuration",children:"Character Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Define agent personality and behavior:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const character = {\n  name: "Assistant",\n  bio: "A helpful AI assistant",\n  style: {\n    tone: "professional",\n    personality: "friendly",\n    language: "en"\n  },\n  topics: ["technology", "science", "general"],\n  // Additional character settings\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"runtime-settings",children:"Runtime Settings"}),"\n",(0,t.jsx)(n.p,{children:"Configure runtime behavior:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const settings = {\n  maxContextLength: 2000,\n  responseTimeout: 30000,\n  modelProvider: "anthropic",\n  temperature: 0.7,\n  // Additional runtime settings\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implement proper error catching"}),"\n",(0,t.jsx)(n.li,{children:"Provide graceful fallbacks"}),"\n",(0,t.jsx)(n.li,{children:"Log errors for debugging"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Resource Management"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Monitor memory usage"}),"\n",(0,t.jsx)(n.li,{children:"Implement rate limiting"}),"\n",(0,t.jsx)(n.li,{children:"Cache frequently accessed data"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Security"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Validate input"}),"\n",(0,t.jsx)(n.li,{children:"Sanitize output"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper authentication"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Performance"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use appropriate model sizes"}),"\n",(0,t.jsx)(n.li,{children:"Implement caching strategies"}),"\n",(0,t.jsx)(n.li,{children:"Optimize database queries"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example-implementation",children:"Example Implementation"}),"\n",(0,t.jsx)(n.p,{children:"Here's a complete example bringing together the core concepts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { AgentRuntime, createAgentRuntime } from \'@your-org/agent-framework\';\nimport { DiscordClient } from \'@your-org/agent-framework/clients/discord\';\n\nasync function main() {\n  // Initialize runtime\n  const runtime = await createAgentRuntime({\n    character: {\n      name: "Helper",\n      bio: "A helpful assistant",\n      modelProvider: "anthropic",\n      style: {\n        tone: "friendly",\n        personality: "helpful"\n      }\n    },\n    settings: {\n      maxContextLength: 2000,\n      temperature: 0.7\n    }\n  });\n\n  // Add custom action\n  runtime.registerAction({\n    name: "HELP",\n    description: "Provide help information",\n    handler: async (runtime, message, state) => {\n      return {\n        text: "Here\'s how I can help...",\n        action: "HELP_RESPONSE"\n      };\n    }\n  });\n\n  // Initialize Discord client\n  const discord = new DiscordClient(runtime);\n  \n  // Start listening\n  discord.start();\n}\n\nmain().catch(console.error);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.p,{children:"Common issues and solutions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Connection Issues"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify API tokens"}),"\n",(0,t.jsx)(n.li,{children:"Check network connectivity"}),"\n",(0,t.jsx)(n.li,{children:"Confirm service status"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Response Timeouts"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Adjust timeout settings"}),"\n",(0,t.jsx)(n.li,{children:"Check rate limits"}),"\n",(0,t.jsx)(n.li,{children:"Verify model availability"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Memory Issues"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Monitor heap usage"}),"\n",(0,t.jsx)(n.li,{children:"Implement garbage collection"}),"\n",(0,t.jsx)(n.li,{children:"Optimize data structures"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"After mastering basic usage, explore:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Advanced configuration options"}),"\n",(0,t.jsx)(n.li,{children:"Custom action development"}),"\n",(0,t.jsx)(n.li,{children:"Integration with external services"}),"\n",(0,t.jsx)(n.li,{children:"Performance optimization techniques"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For more detailed information, refer to the specific component documentation and API reference."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);