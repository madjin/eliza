{"searchDocs":[{"title":"Function: createRelationship","type":0,"sectionRef":"#","url":"/eliza/api/functions/createRelationship","content":"Function: createRelationship ▸ createRelationship(«destructured»): Promise&lt;boolean&gt; Parameters​ Name\tType«destructured»\tObject › runtime\tAgentRuntime › userA\t`${string}-${string}-${string}-${string}-${string}` › userB\t`${string}-${string}-${string}-${string}-${string}` Returns​ Promise&lt;boolean&gt;","keywords":"","version":"Next"},{"title":"Function: formatEvaluatorExampleDescriptions","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluatorExampleDescriptions","content":"Function: formatEvaluatorExampleDescriptions ▸ formatEvaluatorExampleDescriptions(evaluators): string Generates a string summarizing the descriptions of each evaluator example. Parameters​ Name\tType\tDescriptionevaluators\tEvaluator[]\tAn array of evaluator objects, each containing examples. Returns​ string A string that summarizes the descriptions for each evaluator example, formatted with the evaluator name, example number, and description.","keywords":"","version":"Next"},{"title":"Enumeration: GoalStatus","type":0,"sectionRef":"#","url":"/eliza/api/enums/GoalStatus","content":"","keywords":"","version":"Next"},{"title":"Enumeration Members​","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/eliza/api/enums/GoalStatus#enumeration-members","content":" ","version":"Next","tagName":"h2"},{"title":"DONE​","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/eliza/api/enums/GoalStatus#done","content":" • DONE = &quot;DONE&quot;    ","version":"Next","tagName":"h3"},{"title":"FAILED​","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/eliza/api/enums/GoalStatus#failed","content":" • FAILED = &quot;FAILED&quot;    ","version":"Next","tagName":"h3"},{"title":"IN_PROGRESS​","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/eliza/api/enums/GoalStatus#in_progress","content":" • IN_PROGRESS = &quot;IN_PROGRESS&quot; ","version":"Next","tagName":"h3"},{"title":"Function: formatEvaluatorConditions","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluatorConditions","content":"Function: formatEvaluatorConditions ▸ formatEvaluatorConditions(evaluators): string Formats the conditions under which each evaluator is relevant into a readable string. Parameters​ Name\tType\tDescriptionevaluators\tEvaluator[]\tAn array of evaluator objects. Returns​ string A string that concatenates the name and condition of each evaluator, separated by a colon and a newline character.","keywords":"","version":"Next"},{"title":"Key Concepts in Eliza","type":0,"sectionRef":"#","url":"/eliza/api/concepts","content":"","keywords":"","version":"Next"},{"title":"Actions​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#actions","content":" Actions define the behaviors or responses an agent can perform in a given context. They contain the logic for handling specific user intents or situations and can be added or modified to extend the agent's capabilities. Actions are a fundamental building block of eliza's extensibility, allowing developers to customize their agents without modifying the underlying framework.  When a user interacts with the agent, the appropriate action is triggered based on the context and the user's input. Actions can perform various tasks, such as generating responses, making API calls, updating the agent's state, or triggering other actions. Developers can create custom actions to define the specific behaviors and functionalities of their agents.  ","version":"Next","tagName":"h2"},{"title":"Evaluators​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#evaluators","content":" Evaluators are similar to actions but are invoked after each interaction is stored. They assess the agent's state and provide insights or recommendations on how the agent should proceed. Evaluators analyze the context, user input, and other relevant factors to make decisions or generate additional information.  Evaluators can be used for various purposes, such as sentiment analysis, entity recognition, topic classification, or generating personalized recommendations. By implementing custom evaluators, developers can add advanced reasoning capabilities to their agents and enable them to make informed decisions based on the interaction flow.  ","version":"Next","tagName":"h2"},{"title":"Providers​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#providers","content":" Providers are components that add context to the agent's interactions by integrating external data sources or APIs. They allow agents to access and utilize relevant information during interactions, enhancing the agent's knowledge and capabilities. Providers can be used to retrieve data from databases, invoke external services, or fetch real-time information.  For example, a weather provider can be implemented to provide the agent with current weather information based on the user's location. Similarly, a product catalog provider can be used to retrieve product details and recommendations based on the user's preferences. Providers enable agents to deliver more accurate and informative responses by incorporating external data sources.  ","version":"Next","tagName":"h2"},{"title":"State and Context​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#state-and-context","content":" Eliza emphasizes the importance of maintaining state and context to ensure coherent and contextually relevant interactions. The state represents a snapshot of the agent's current situation, capturing essential information such as user details, recent interactions, goals, and relevant facts. It provides a comprehensive view of the current context and helps the agent make informed decisions.  The context is derived from the state and represents the information that is sent to the AI model for response generation. It includes relevant details from the state, such as the user's input, previous interactions, and any additional contextual information required by the AI model. The context is dynamically generated based on the current state and is used to guide the AI model in generating appropriate responses.  ","version":"Next","tagName":"h2"},{"title":"Memories​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#memories","content":" Memories enable agents to store and retrieve interaction-related data. They are stored in the database as Memory objects and are managed by the MemoryManager class. Memories can be of different types, such as messages, facts, and lore, each serving a specific purpose.  Messages represent the user inputs and agent responses that form the interaction history. They contain information such as the user ID, content, and associated action. Facts represent the knowledge or information derived from the interactions. They can be used to store key insights, important details, or conclusions drawn from the interactions.  Lore is another type of memory that represents the contextual knowledge or information that the agent can access and retrieve during interactions. It can include a wide range of data, such as product information, FAQs, historical facts, domain-specific knowledge, or even creative content like stories or character backgrounds. Lore enables agents to provide informed and relevant responses by incorporating pre-existing knowledge.  Developers can extend the memory system by adding custom memory types to suit their specific requirements. The MemoryManager class provides methods for storing, retrieving, and managing memories efficiently.  ","version":"Next","tagName":"h2"},{"title":"Messages​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#messages","content":" Messages are the core unit of communication between users and agents in eliza. They are represented as objects that contain information such as the user ID, content, and associated action. Messages are exchanged between users and agents during interactions and form the basis for understanding and response generation.  When a user sends a message, it is processed by the agent, triggering the appropriate actions and evaluators. The agent analyzes the message content, extracts relevant information, and generates a response based on the defined behaviors and rules. Messages can also be stored as memories to maintain a history of the interactions and enable the agent to refer back to previous exchanges.  ","version":"Next","tagName":"h2"},{"title":"Goals​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#goals","content":" Goals represent high-level objectives or tasks that the agent aims to accomplish during its interactions. They provide a way to guide the agent's behavior towards specific outcomes and enable the agent to make decisions aligned with the desired results. Goals can be defined and tracked using the eliza framework.  For example, in a task-oriented scenario, a goal could be to assist the user in completing a specific task or answering their question satisfactorily. The agent can break down the goal into smaller sub-goals or steps and work towards achieving them throughout the interaction. By defining and tracking goals, agents can adapt their behavior, ask relevant questions, and provide targeted responses to help users accomplish their objectives.  ","version":"Next","tagName":"h2"},{"title":"Relationships​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#relationships","content":" Relationships capture the connections and associations between entities in the agent's domain. They represent the social dynamics, roles, and interactions between users, objects, or other entities. Relationships enable agents to personalize interactions and maintain a coherent understanding of the domain.  In eliza, relationships can be defined and managed using the Relationship object. It contains information such as the IDs of the related entities, the type of relationship (e.g., user-user, user-object), and any additional metadata relevant to the relationship.  By understanding and utilizing relationships, agents can tailor their responses, provide personalized recommendations, and maintain a contextually appropriate interaction flow. Relationships can also be used to enforce access controls, permissions, and domain-specific constraints.  ","version":"Next","tagName":"h2"},{"title":"Stateful vs. Stateless Pattern​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#stateful-vs-stateless-pattern","content":" Eliza supports both stateful and stateless patterns for managing the agent's state, providing flexibility to developers based on their specific requirements. The choice between stateful and stateless patterns depends on factors such as the nature of the agent's domain, the level of personalization required, and the scalability needs of the application.  In the stateful pattern, the agent maintains a persistent state throughout its interactions. It retains the context and history across multiple exchanges, allowing for more complex and personalized interactions. The stateful pattern is particularly useful when dealing with multi-turn dialogues, user-specific preferences, or scenarios that require tracking long-term information.  On the other hand, the stateless pattern treats each interaction as independent and self-contained. The agent does not maintain a persistent state across interactions, and each request is processed in isolation. Stateless agents rely solely on the information provided in the current input and external data sources to generate responses. This pattern offers simplicity and scalability, as it eliminates the need to manage and store interaction-specific data.  Eliza provides the flexibility to adopt either approach or even combine them based on the specific requirements of the agent. Developers can choose the appropriate pattern based on their needs and design their agents accordingly.  ","version":"Next","tagName":"h2"},{"title":"Database Adapters​","type":1,"pageTitle":"Key Concepts in Eliza","url":"/eliza/api/concepts#database-adapters","content":" Eliza includes database adapters to enable seamless integration with various storage systems. The default adapter supports Supabase, a cloud-based database service, allowing agents to persist and retrieve interaction-related data. However, the framework's modular design allows developers to create custom database adapters to integrate with other databases or storage solutions that best fit their needs.  Database adapters abstract the underlying storage mechanisms, providing a consistent interface for querying and manipulating data related to the agent's interactions. They handle tasks such as storing and retrieving memories, managing goals and relationships, and persisting other relevant information.  By using database adapters, developers can focus on building the agent's logic and capabilities without concerning themselves with the intricacies of data storage and retrieval. The adapters provide a layer of abstraction, allowing developers to switch between different storage solutions or migrate their data easily. ","version":"Next","tagName":"h2"},{"title":"Function: createGoal","type":0,"sectionRef":"#","url":"/eliza/api/functions/createGoal","content":"Function: createGoal ▸ createGoal(«destructured»): Promise&lt;void&gt; Parameters​ Name\tType«destructured»\tObject › goal\tGoal › runtime\tAgentRuntime Returns​ Promise&lt;void&gt;","keywords":"","version":"Next"},{"title":"Function: formatEvaluatorExamples","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluatorExamples","content":"Function: formatEvaluatorExamples ▸ formatEvaluatorExamples(evaluators): string Formats evaluator examples into a readable string, replacing placeholders with generated names. Parameters​ Name\tType\tDescriptionevaluators\tEvaluator[]\tAn array of evaluator objects, each containing examples to format. Returns​ string A string that presents each evaluator example in a structured format, including context, messages, and outcomes, with placeholders replaced by generated names.","keywords":"","version":"Next"},{"title":"Function: formatActionNames","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatActionNames","content":"Function: formatActionNames ▸ formatActionNames(actions): string Formats the names of the provided actions into a comma-separated string. Parameters​ Name\tType\tDescriptionactions\tAction[]\tAn array of Action objects from which to extract names. Returns​ string A comma-separated string of action names.","keywords":"","version":"Next"},{"title":"Function: formatEvaluatorNames","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluatorNames","content":"Function: formatEvaluatorNames ▸ formatEvaluatorNames(evaluators): string Formats the names of evaluators into a comma-separated list, each enclosed in single quotes. Parameters​ Name\tType\tDescriptionevaluators\tEvaluator[]\tAn array of evaluator objects. Returns​ string A string that concatenates the names of all evaluators, each enclosed in single quotes and separated by commas.","keywords":"","version":"Next"},{"title":"Eliza","type":0,"sectionRef":"#","url":"/eliza/api","content":"","keywords":"","version":"Next"},{"title":"Install Node.js​","type":1,"pageTitle":"Eliza","url":"/eliza/api#install-nodejs","content":" https://docs.npmjs.com/downloading-and-installing-node-js-and-npm  ","version":"Next","tagName":"h2"},{"title":"Edit the .env file​","type":1,"pageTitle":"Eliza","url":"/eliza/api#edit-the-env-file","content":" Copy .env.example to .env and fill in the appropriate valuesEdit the TWITTER environment variables to add your bot's username and password  ","version":"Next","tagName":"h2"},{"title":"Edit the character file​","type":1,"pageTitle":"Eliza","url":"/eliza/api#edit-the-character-file","content":" Check out the file src/core/defaultCharacter.ts - you can modify thisYou can also load characters with the node --loader ts-node/esm src/index.ts --characters=&quot;path/to/your/character.json&quot; and run multiple bots at the same time.  ","version":"Next","tagName":"h2"},{"title":"Linux Installation​","type":1,"pageTitle":"Eliza","url":"/eliza/api#linux-installation","content":" You might need these  npm install --include=optional sharp   ","version":"Next","tagName":"h3"},{"title":"Run with Llama​","type":1,"pageTitle":"Eliza","url":"/eliza/api#run-with-llama","content":" You can run Llama 70B or 405B models by setting the XAI_MODEL environment variable to meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo or meta-llama/Meta-Llama-3.1-405B-Instruct  ","version":"Next","tagName":"h3"},{"title":"Run with Grok​","type":1,"pageTitle":"Eliza","url":"/eliza/api#run-with-grok","content":" You can run Grok models by setting the XAI_MODEL environment variable to grok-beta  ","version":"Next","tagName":"h3"},{"title":"Run with OpenAI​","type":1,"pageTitle":"Eliza","url":"/eliza/api#run-with-openai","content":" You can run OpenAI models by setting the XAI_MODEL environment variable to gpt-4o-mini or gpt-4o  Requires Node 20+  If you are getting strange issues when starting up, make sure you're using Node 20+. Some APIs are not compatible with previous versions. You can check your node version with node -v. If you need to install a new version of node, we recommend using nvm.  ","version":"Next","tagName":"h3"},{"title":"Additional Requirements​","type":1,"pageTitle":"Eliza","url":"/eliza/api#additional-requirements","content":" You may need to install Sharp. If you see an error when starting up, try installing it with the following command:  npm install --include=optional sharp   Environment Setup  You will need to add environment variables to your .env file to connect to various platforms:  # Required environment variables # Start Discord DISCORD_APPLICATION_ID= DISCORD_API_TOKEN= # Bot token # Start Twitter TWITTER_USERNAME= # Account username TWITTER_PASSWORD= # Account password TWITTER_EMAIL= # Account email TWITTER_COOKIES= # Account cookies   Local Setup  ","version":"Next","tagName":"h2"},{"title":"CUDA Setup​","type":1,"pageTitle":"Eliza","url":"/eliza/api#cuda-setup","content":" If you have an NVIDIA GPU, you can install CUDA to speed up local inference dramatically.  npm install npx --no node-llama-cpp source download --gpu cuda   Make sure that you've installed the CUDA Toolkit, including cuDNN and cuBLAS.  ","version":"Next","tagName":"h2"},{"title":"Running locally​","type":1,"pageTitle":"Eliza","url":"/eliza/api#running-locally","content":" Add XAI_MODEL and set it to one of the above options from Run with Llama - you can leave X_SERVER_URL and XAI_API_KEY blank, it downloads the model from huggingface and queries it locally  Cloud Setup (with OpenAI)  In addition to the environment variables above, you will need to add the following:  # OpenAI handles the bulk of the work with chat, TTS, image recognition, etc. OPENAI_API_KEY=sk-* # OpenAI API key, starting with sk- # The agent can also ask Claude for help if you have an API key ANTHROPIC_API_KEY= # For Elevenlabs voice generation on Discord voice ELEVENLABS_XI_API_KEY= # API key from elevenlabs # ELEVENLABS SETTINGS ELEVENLABS_MODEL_ID=eleven_multilingual_v2 ELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM ELEVENLABS_VOICE_STABILITY=0.5 ELEVENLABS_VOICE_SIMILARITY_BOOST=0.9 ELEVENLABS_VOICE_STYLE=0.66 ELEVENLABS_VOICE_USE_SPEAKER_BOOST=false ELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4 ELEVENLABS_OUTPUT_FORMAT=pcm_16000   Discord Bot  For help with setting up your Discord Bot, check out here: https://discordjs.guide/preparations/setting-up-a-bot-application.html ","version":"Next","tagName":"h2"},{"title":"Function: formatEvaluators","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluators","content":"Function: formatEvaluators ▸ formatEvaluators(evaluators): string Formats evaluator details into a string, including both the name and description of each evaluator. Parameters​ Name\tType\tDescriptionevaluators\tEvaluator[]\tAn array of evaluator objects. Returns​ string A string that concatenates the name and description of each evaluator, separated by a colon and a newline character.","keywords":"","version":"Next"},{"title":"Function: addLore","type":0,"sectionRef":"#","url":"/eliza/api/functions/addLore","content":"Function: addLore ▸ addLore(params): Promise&lt;void&gt; Adds a piece of lore to the lore database. Lore can include static information like documents, historical facts, game lore, etc. Parameters​ Name\tType\tDefault value\tDescriptionparams\tObject\tundefined\tThe parameters for adding lore. params.content\tContent\tundefined\tThe actual content of the lore. params.embedContent?\tContent\tundefined\tOptional content used to generate an embedding if different from content. params.room_id?\t`${string}-${string}-${string}-${string}-${string}`\tzeroUuid\tThe room ID associated with the lore, defaults to a zero UUID. params.runtime\tAgentRuntime\tundefined\tThe runtime environment of the agent. params.source\tstring\tundefined\tThe source of the lore content. params.user_id?\t`${string}-${string}-${string}-${string}-${string}`\tzeroUuid\tThe user ID associated with the lore, defaults to a zero UUID. Returns​ Promise&lt;void&gt; A promise that resolves when the lore has been added successfully.","keywords":"","version":"Next"},{"title":"Function: composeContext","type":0,"sectionRef":"#","url":"/eliza/api/functions/composeContext","content":"Function: composeContext ▸ composeContext(params): string Composes a context string by replacing placeholders in a template with corresponding values from the state. This function takes a template string with placeholders in the format {{placeholder}} and a state object. It replaces each placeholder with the value from the state object that matches the placeholder's name. If a matching key is not found in the state object for a given placeholder, the placeholder is replaced with an empty string. Parameters​ Name\tType\tDescriptionparams\tObject\tThe parameters for composing the context. params.state\tState\tThe state object containing values to replace the placeholders in the template. params.template\tstring\tThe template string containing placeholders to be replaced with state values. Returns​ string The composed context string with placeholders replaced by corresponding state values. Example // Given a state object and a template const state = { userName: &quot;Alice&quot;, userAge: 30 }; const template = &quot;Hello, {{userName}}! You are {{userAge}} years old.&quot;; // Composing the context will result in: // &quot;Hello, Alice! You are 30 years old.&quot; const context = composeContext({ state, template }); ","keywords":"","version":"Next"},{"title":"Function: formatActions","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatActions","content":"Function: formatActions ▸ formatActions(actions): string Formats the provided actions into a detailed string listing each action's name and description, separated by commas and newlines. Parameters​ Name\tType\tDescriptionactions\tAction[]\tAn array of Action objects to format. Returns​ string A detailed string of actions, including names and descriptions.","keywords":"","version":"Next"},{"title":"Class: MemoryManager","type":0,"sectionRef":"#","url":"/eliza/api/classes/MemoryManager","content":"","keywords":"","version":"Next"},{"title":"Constructors​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#constructor","content":" • new MemoryManager(opts): MemoryManager  Constructs a new MemoryManager instance.  Parameters​  Name\tType\tDescriptionopts\tObject\tOptions for the manager. opts.runtime\tAgentRuntime\tThe AgentRuntime instance associated with this manager. opts.tableName\tstring\tThe name of the table this manager will operate on.  Returns​  MemoryManager  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#properties","content":" ","version":"Next","tagName":"h2"},{"title":"runtime​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#runtime","content":" • runtime: AgentRuntime  The AgentRuntime instance associated with this manager.    ","version":"Next","tagName":"h3"},{"title":"tableName​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#tablename","content":" • tableName: string  The name of the database table this manager operates on.  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#methods","content":" ","version":"Next","tagName":"h2"},{"title":"addEmbeddingToMemory​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#addembeddingtomemory","content":" ▸ addEmbeddingToMemory(memory): Promise&lt;Memory&gt;  Adds an embedding vector to a memory object. If the memory already has an embedding, it is returned as is.  Parameters​  Name\tType\tDescriptionmemory\tMemory\tThe memory object to add an embedding to.  Returns​  Promise&lt;Memory&gt;  A Promise resolving to the memory object, potentially updated with an embedding vector.    ","version":"Next","tagName":"h3"},{"title":"countMemories​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#countmemories","content":" ▸ countMemories(room_id, unique?): Promise&lt;number&gt;  Counts the number of memories associated with a set of user IDs, with an option for uniqueness.  Parameters​  Name\tType\tDefault value\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tundefined\tThe room ID to count memories for. unique\tboolean\ttrue\tWhether to count unique memories only.  Returns​  Promise&lt;number&gt;  A Promise resolving to the count of memories.    ","version":"Next","tagName":"h3"},{"title":"createMemory​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#creatememory","content":" ▸ createMemory(memory, unique?): Promise&lt;void&gt;  Creates a new memory in the database, with an option to check for similarity before insertion.  Parameters​  Name\tType\tDefault value\tDescriptionmemory\tMemory\tundefined\tThe memory object to create. unique\tboolean\tfalse\tWhether to check for similarity before insertion.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the operation completes.    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#getcachedembeddings","content":" ▸ getCachedEmbeddings(content): Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;  Parameters​  Name\tTypecontent\tstring  Returns​  Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;    ","version":"Next","tagName":"h3"},{"title":"getMemories​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#getmemories","content":" ▸ getMemories(opts): Promise&lt;Memory[]&gt;  Retrieves a list of memories by user IDs, with optional deduplication.  Parameters​  Name\tType\tDefault value\tDescriptionopts\tObject\tundefined\tOptions including user IDs, count, and uniqueness. opts.count?\tnumber\t10\tThe number of memories to retrieve. opts.room_id\t`${string}-${string}-${string}-${string}-${string}`\tundefined\tThe room ID to retrieve memories for. opts.unique?\tboolean\ttrue\tWhether to retrieve unique memories only.  Returns​  Promise&lt;Memory[]&gt;  A Promise resolving to an array of Memory objects.    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#removeallmemories","content":" ▸ removeAllMemories(room_id): Promise&lt;void&gt;  Removes all memories associated with a set of user IDs.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe room ID to remove memories for.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the operation completes.    ","version":"Next","tagName":"h3"},{"title":"removeMemory​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#removememory","content":" ▸ removeMemory(memoryId): Promise&lt;void&gt;  Removes a memory from the database by its ID.  Parameters​  Name\tType\tDescriptionmemoryId\t`${string}-${string}-${string}-${string}-${string}`\tThe ID of the memory to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the operation completes.    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager#searchmemoriesbyembedding","content":" ▸ searchMemoriesByEmbedding(embedding, opts): Promise&lt;Memory[]&gt;  Searches for memories similar to a given embedding vector.  Parameters​  Name\tType\tDescriptionembedding\tnumber[]\tThe embedding vector to search with. opts\tObject\tOptions including match threshold, count, user IDs, and uniqueness. opts.count?\tnumber\tThe maximum number of memories to retrieve. opts.match_threshold?\tnumber\tThe similarity threshold for matching memories. opts.room_id\t`${string}-${string}-${string}-${string}-${string}`\tThe room ID to retrieve memories for. opts.unique?\tboolean\tWhether to retrieve unique memories only.  Returns​  Promise&lt;Memory[]&gt;  A Promise resolving to an array of Memory objects that match the embedding. ","version":"Next","tagName":"h3"},{"title":"Function: formatGoalsAsString","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatGoalsAsString","content":"Function: formatGoalsAsString ▸ formatGoalsAsString(«destructured»): string Parameters​ Name\tType«destructured»\tObject › goals\tGoal[] Returns​ string","keywords":"","version":"Next"},{"title":"Eliza","type":0,"sectionRef":"#","url":"/eliza/api/docs","content":"","keywords":"","version":"Next"},{"title":"Install Node.js​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#install-nodejs","content":" https://docs.npmjs.com/downloading-and-installing-node-js-and-npm  ","version":"Next","tagName":"h2"},{"title":"Edit the .env file​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#edit-the-env-file","content":" Copy .env.example to .env and fill in the appropriate valuesEdit the TWITTER environment variables to add your bot's username and password  ","version":"Next","tagName":"h2"},{"title":"Edit the character file​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#edit-the-character-file","content":" Check out the file src/core/defaultCharacter.ts - you can modify thisYou can also load characters with the node --loader ts-node/esm src/index.ts --characters=&quot;path/to/your/character.json&quot; and run multiple bots at the same time.  ","version":"Next","tagName":"h2"},{"title":"Linux Installation​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#linux-installation","content":" You might need these  npm install --include=optional sharp   ","version":"Next","tagName":"h3"},{"title":"Run with Llama​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#run-with-llama","content":" You can run Llama 70B or 405B models by setting the XAI_MODEL environment variable to meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo or meta-llama/Meta-Llama-3.1-405B-Instruct  ","version":"Next","tagName":"h3"},{"title":"Run with Grok​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#run-with-grok","content":" You can run Grok models by setting the XAI_MODEL environment variable to grok-beta  ","version":"Next","tagName":"h3"},{"title":"Run with OpenAI​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#run-with-openai","content":" You can run OpenAI models by setting the XAI_MODEL environment variable to gpt-4o-mini or gpt-4o  Requires Node 20+  If you are getting strange issues when starting up, make sure you're using Node 20+. Some APIs are not compatible with previous versions. You can check your node version with node -v. If you need to install a new version of node, we recommend using nvm.  ","version":"Next","tagName":"h3"},{"title":"Additional Requirements​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#additional-requirements","content":" You may need to install Sharp. If you see an error when starting up, try installing it with the following command:  npm install --include=optional sharp   Environment Setup  You will need to add environment variables to your .env file to connect to various platforms:  # Required environment variables # Start Discord DISCORD_APPLICATION_ID= DISCORD_API_TOKEN= # Bot token # Start Twitter TWITTER_USERNAME= # Account username TWITTER_PASSWORD= # Account password TWITTER_EMAIL= # Account email TWITTER_COOKIES= # Account cookies   Local Setup  ","version":"Next","tagName":"h2"},{"title":"CUDA Setup​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#cuda-setup","content":" If you have an NVIDIA GPU, you can install CUDA to speed up local inference dramatically.  npm install npx --no node-llama-cpp source download --gpu cuda   Make sure that you've installed the CUDA Toolkit, including cuDNN and cuBLAS.  ","version":"Next","tagName":"h2"},{"title":"Running locally​","type":1,"pageTitle":"Eliza","url":"/eliza/api/docs#running-locally","content":" Add XAI_MODEL and set it to one of the above options from Run with Llama - you can leave X_SERVER_URL and XAI_API_KEY blank, it downloads the model from huggingface and queries it locally  Cloud Setup (with OpenAI)  In addition to the environment variables above, you will need to add the following:  # OpenAI handles the bulk of the work with chat, TTS, image recognition, etc. OPENAI_API_KEY=sk-* # OpenAI API key, starting with sk- # The agent can also ask Claude for help if you have an API key ANTHROPIC_API_KEY= # For Elevenlabs voice generation on Discord voice ELEVENLABS_XI_API_KEY= # API key from elevenlabs # ELEVENLABS SETTINGS ELEVENLABS_MODEL_ID=eleven_multilingual_v2 ELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM ELEVENLABS_VOICE_STABILITY=0.5 ELEVENLABS_VOICE_SIMILARITY_BOOST=0.9 ELEVENLABS_VOICE_STYLE=0.66 ELEVENLABS_VOICE_USE_SPEAKER_BOOST=false ELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4 ELEVENLABS_OUTPUT_FORMAT=pcm_16000   Discord Bot  For help with setting up your Discord Bot, check out here: https://discordjs.guide/preparations/setting-up-a-bot-application.html ","version":"Next","tagName":"h2"},{"title":"Function: addHeader","type":0,"sectionRef":"#","url":"/eliza/api/functions/addHeader","content":"Function: addHeader ▸ addHeader(header, body): string Adds a header to a body of text. This function takes a header string and a body string and returns a new string with the header prepended to the body. If the body string is empty, the header is returned as is. Parameters​ Name\tType\tDescriptionheader\tstring\tThe header to add to the body. body\tstring\tThe body to which to add the header. Returns​ string The body with the header prepended. Example // Given a header and a body const header = &quot;Header&quot;; const body = &quot;Body&quot;; // Adding the header to the body will result in: // &quot;Header\\nBody&quot; const text = addHeader(header, body); ","keywords":"","version":"Next"},{"title":"Function: composeActionExamples","type":0,"sectionRef":"#","url":"/eliza/api/functions/composeActionExamples","content":"Function: composeActionExamples ▸ composeActionExamples(actionsData, count): string Composes a set of example conversations based on provided actions and a specified count. It randomly selects examples from the provided actions and formats them with generated names. Parameters​ Name\tType\tDescriptionactionsData\tAction[]\tAn array of Action objects from which to draw examples. count\tnumber\tThe number of examples to generate. Returns​ string A string containing formatted examples of conversations.","keywords":"","version":"Next"},{"title":"Function: getRelationship","type":0,"sectionRef":"#","url":"/eliza/api/functions/getRelationship","content":"Function: getRelationship ▸ getRelationship(«destructured»): Promise&lt;null | Relationship&gt; Parameters​ Name\tType«destructured»\tObject › runtime\tAgentRuntime › userA\t`${string}-${string}-${string}-${string}-${string}` › userB\t`${string}-${string}-${string}-${string}-${string}` Returns​ Promise&lt;null | Relationship&gt;","keywords":"","version":"Next"},{"title":"Function: formatLore","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatLore","content":"Function: formatLore ▸ formatLore(lore): string Formats an array of lore entries into a single string. Each entry is separated by a newline, and sources are annotated. Parameters​ Name\tType\tDescriptionlore\tMemory[]\tAn array of lore entries to format. Returns​ string A formatted string containing all the lore entries, each separated by a newline, with sources annotated.","keywords":"","version":"Next"},{"title":"Function: formatMessages","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatMessages","content":"Function: formatMessages ▸ formatMessages(«destructured»): string Format messages into a string Parameters​ Name\tType«destructured»\tObject › actors\tActor[] › messages\tMemory[] Returns​ string string","keywords":"","version":"Next"},{"title":"Function: formatActionConditions","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatActionConditions","content":"Function: formatActionConditions ▸ formatActionConditions(actions): string Formats the conditions for each provided action into a string, listing each action's name and its associated condition, separated by commas and newlines. Parameters​ Name\tType\tDescriptionactions\tAction[]\tAn array of Action objects from which to extract conditions. Returns​ string A string listing each action's name and its condition.","keywords":"","version":"Next"},{"title":"Function: formatRelationships","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatRelationships","content":"Function: formatRelationships ▸ formatRelationships(«destructured»): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt; Parameters​ Name\tType«destructured»\tObject › runtime\tAgentRuntime › user_id\t`${string}-${string}-${string}-${string}-${string}` Returns​ Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;","keywords":"","version":"Next"},{"title":"Function: getActorDetails","type":0,"sectionRef":"#","url":"/eliza/api/functions/getActorDetails","content":"Function: getActorDetails ▸ getActorDetails(«destructured»): Promise&lt;Actor[]&gt; Get details for a list of actors. Parameters​ Name\tType«destructured»\tObject › room_id\t`${string}-${string}-${string}-${string}-${string}` › runtime\tAgentRuntime Returns​ Promise&lt;Actor[]&gt;","keywords":"","version":"Next"},{"title":"Function: formatEvaluatorExampleConditions","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluatorExampleConditions","content":"Function: formatEvaluatorExampleConditions ▸ formatEvaluatorExampleConditions(evaluators): string Generates a string describing the conditions under which each evaluator example is relevant. Parameters​ Name\tType\tDescriptionevaluators\tEvaluator[]\tAn array of evaluator objects, each containing examples. Returns​ string A string that describes the conditions for each evaluator example, formatted with the evaluator name, example number, and condition.","keywords":"","version":"Next"},{"title":"Function: getFormattedActions","type":0,"sectionRef":"#","url":"/eliza/api/functions/getFormattedActions","content":"Function: getFormattedActions ▸ getFormattedActions(actions): string Formats the provided actions into a string listing each action's name and description. Parameters​ Name\tType\tDescriptionactions\tAction[]\tAn array of Action objects to format. Returns​ string A formatted string listing each action's name and description.","keywords":"","version":"Next"},{"title":"Function: getGoals","type":0,"sectionRef":"#","url":"/eliza/api/functions/getGoals","content":"Function: getGoals ▸ getGoals(«destructured»): Promise&lt;Goal[]&gt; Parameters​ Name\tType\tDefault value«destructured»\tObject\tundefined › count?\tnumber\t5 › onlyInProgress?\tboolean\ttrue › room_id\t`${string}-${string}-${string}-${string}-${string}`\tundefined › runtime\tAgentRuntime\tundefined › user_id?\t`${string}-${string}-${string}-${string}-${string}`\tundefined Returns​ Promise&lt;Goal[]&gt;","keywords":"","version":"Next"},{"title":"Class: AgentRuntime","type":0,"sectionRef":"#","url":"/eliza/api/classes/AgentRuntime","content":"","keywords":"","version":"Next"},{"title":"Constructors​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#constructor","content":" • new AgentRuntime(opts): AgentRuntime  Creates an instance of AgentRuntime.  Parameters​  Name\tType\tDescriptionopts\tObject\tThe options for configuring the AgentRuntime. opts.actions?\tAction[]\tOptional custom actions. opts.agentId?\t`${string}-${string}-${string}-${string}-${string}`\tOptional ID of the agent. opts.conversationLength?\tnumber\tThe number of messages to hold in the recent message cache. opts.databaseAdapter\tDatabaseAdapter\tThe database adapter used for interacting with the database. opts.debugMode?\tboolean\tIf true, debug messages will be logged. opts.embeddingModel?\tstring\tThe model to use for embedding. opts.evaluators?\tEvaluator[]\tOptional custom evaluators. opts.fetch?\tunknown\tCustom fetch function to use for making requests. opts.model?\tstring\tThe model to use for completion. opts.providers?\tProvider[]\tOptional context providers. opts.serverUrl?\tstring\tThe URL of the worker. opts.token\tstring\tThe JWT token, can be a JWT token if outside worker, or an OpenAI token if inside worker.  Returns​  AgentRuntime  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#properties","content":" ","version":"Next","tagName":"h2"},{"title":"actions​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#actions","content":" • actions: Action[] = []  Custom actions that the agent can perform.    ","version":"Next","tagName":"h3"},{"title":"agentId​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#agentid","content":" • agentId: `${string}-${string}-${string}-${string}-${string}` = zeroUuid  The ID of the agent    ","version":"Next","tagName":"h3"},{"title":"databaseAdapter​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#databaseadapter","content":" • databaseAdapter: DatabaseAdapter  The database adapter used for interacting with the database.    ","version":"Next","tagName":"h3"},{"title":"debugMode​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#debugmode","content":" • debugMode: boolean  Indicates if debug messages should be logged.    ","version":"Next","tagName":"h3"},{"title":"descriptionManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#descriptionmanager","content":" • descriptionManager: MemoryManager  Store and recall descriptions of users based on conversations.    ","version":"Next","tagName":"h3"},{"title":"embeddingModel​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#embeddingmodel","content":" • embeddingModel: string = &quot;text-embedding-3-small&quot;  The model to use for embedding.    ","version":"Next","tagName":"h3"},{"title":"evaluators​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#evaluators","content":" • evaluators: Evaluator[] = []  Evaluators used to assess and guide the agent's responses.    ","version":"Next","tagName":"h3"},{"title":"factManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#factmanager","content":" • factManager: MemoryManager  Manage the fact and recall of facts.    ","version":"Next","tagName":"h3"},{"title":"fetch​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#fetch","content":" • fetch: (input: RequestInfo | URL, init?: RequestInit&lt;CfProperties&lt;unknown&gt;&gt;) =&gt; Promise&lt;Response&gt;(input: RequestInfo, init?: RequestInit&lt;CfProperties&lt;unknown&gt;&gt;) =&gt; Promise&lt;Response&gt;(input: RequestInfo, init?: RequestInit&lt;RequestInitCfProperties&gt;) =&gt; Promise&lt;Response&gt; = fetch  Fetch function to use Some environments may not have access to the global fetch function and need a custom fetch override.  Type declaration​  ▸ (input, init?): Promise&lt;Response&gt;  Fetch function to use Some environments may not have access to the global fetch function and need a custom fetch override.  Parameters​  Name\tTypeinput\tRequestInfo | URL init?\tRequestInit&lt;CfProperties&lt;unknown&gt;&gt;  Returns​  Promise&lt;Response&gt;  ▸ (input, init?): Promise&lt;Response&gt;  Fetch function to use Some environments may not have access to the global fetch function and need a custom fetch override.  Parameters​  Name\tTypeinput\tRequestInfo init?\tRequestInit&lt;CfProperties&lt;unknown&gt;&gt;  Returns​  Promise&lt;Response&gt;  ▸ (input, init?): Promise&lt;Response&gt;  Fetch function to use Some environments may not have access to the global fetch function and need a custom fetch override.  Parameters​  Name\tTypeinput\tRequestInfo init?\tRequestInit&lt;RequestInitCfProperties&gt;  Returns​  Promise&lt;Response&gt;    ","version":"Next","tagName":"h3"},{"title":"loreManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#loremanager","content":" • loreManager: MemoryManager  Manage the creation and recall of static information (documents, historical game lore, etc)    ","version":"Next","tagName":"h3"},{"title":"messageManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#messagemanager","content":" • messageManager: MemoryManager  Store messages that are sent and received by the agent.    ","version":"Next","tagName":"h3"},{"title":"model​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#model","content":" • model: string = &quot;gpt-3.5-turbo-0125&quot;  The model to use for completion.    ","version":"Next","tagName":"h3"},{"title":"providers​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#providers","content":" • providers: Provider[] = []  Context providers used to provide context for message generation.    ","version":"Next","tagName":"h3"},{"title":"serverUrl​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#serverurl","content":" • serverUrl: string = &quot;http://localhost:7998&quot;  The base URL of the server where the agent's requests are processed.    ","version":"Next","tagName":"h3"},{"title":"token​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#token","content":" • token: null | string  Authentication token used for securing requests.  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#methods","content":" ","version":"Next","tagName":"h2"},{"title":"completion​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#completion","content":" ▸ completion(opts): Promise&lt;string&gt;  Send a message to the OpenAI API for completion.  Parameters​  Name\tType\tDefault value\tDescriptionopts\tObject\tundefined\tThe options for the completion request. opts.context\tundefined | string\t&quot;&quot;\tThe context of the message to be completed. opts.frequency_penalty\tundefined | number\t0.0\tThe frequency penalty to apply to the completion. opts.model\tundefined | string\tundefined\tThe model to use for completion. opts.presence_penalty\tundefined | number\t0.0\tThe presence penalty to apply to the completion. opts.stop\tundefined | never[]\t[]\tA list of strings to stop the completion at. opts.temperature\tundefined | number\t0.7\tThe temperature to apply to the completion.  Returns​  Promise&lt;string&gt;  The completed message.    ","version":"Next","tagName":"h3"},{"title":"composeState​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#composestate","content":" ▸ composeState(message, additionalKeys?): Promise&lt;{ actionConditions: string ; actionExamples: string ; actionNames: string ; actions: string ; actors: string ; actorsData: Actor[] ; agentId: `${string}-${string}-${string}-${string}-${string}` ; agentName: undefined | string ; evaluatorConditions: string ; evaluatorExamples: string ; evaluatorNames: string ; evaluators: string ; evaluatorsData: Evaluator[] ; goals: string ; goalsData: Goal[] ; lore: string ; loreData: Memory[] ; providers: string ; recentFacts: string ; recentFactsData: Memory[] ; recentMessages: string ; recentMessagesData: Memory[] ; relevantFacts: string ; relevantFactsData: Memory[] ; room_id: `${string}-${string}-${string}-${string}-${string}` ; senderName: undefined | string }&gt;  Compose the state of the agent into an object that can be passed or used for response generation.  Parameters​  Name\tType\tDescriptionmessage\tMessage\tThe message to compose the state from. additionalKeys\tObject\t-  Returns​  Promise&lt;{ actionConditions: string ; actionExamples: string ; actionNames: string ; actions: string ; actors: string ; actorsData: Actor[] ; agentId: `${string}-${string}-${string}-${string}-${string}` ; agentName: undefined | string ; evaluatorConditions: string ; evaluatorExamples: string ; evaluatorNames: string ; evaluators: string ; evaluatorsData: Evaluator[] ; goals: string ; goalsData: Goal[] ; lore: string ; loreData: Memory[] ; providers: string ; recentFacts: string ; recentFactsData: Memory[] ; recentMessages: string ; recentMessagesData: Memory[] ; relevantFacts: string ; relevantFactsData: Memory[] ; room_id: `${string}-${string}-${string}-${string}-${string}` ; senderName: undefined | string }&gt;  The state of the agent.    ","version":"Next","tagName":"h3"},{"title":"embed​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#embed","content":" ▸ embed(input): Promise&lt;number[]&gt;  Send a message to the OpenAI API for embedding.  Parameters​  Name\tType\tDescriptioninput\tstring\tThe input to be embedded.  Returns​  Promise&lt;number[]&gt;  The embedding of the input.    ","version":"Next","tagName":"h3"},{"title":"ensureParticipantExists​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#ensureparticipantexists","content":" ▸ ensureParticipantExists(user_id, room_id): Promise&lt;void&gt;  Ensure the existence of a participant in the room. If the participant does not exist, they are added to the room.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe user ID to ensure the existence of. room_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;void&gt;  Throws  An error if the participant cannot be added.    ","version":"Next","tagName":"h3"},{"title":"ensureRoomExists​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#ensureroomexists","content":" ▸ ensureRoomExists(user_id, room_id?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Ensure the existence of a room between the agent and a user. If no room exists, a new room is created and the user and agent are added as participants. The room ID is returned.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe user ID to create a room with. room_id?\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  The room ID of the room between the agent and the user.  Throws  An error if the room cannot be created.    ","version":"Next","tagName":"h3"},{"title":"evaluate​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#evaluate","content":" ▸ evaluate(message, state?): Promise&lt;string[]&gt;  Evaluate the message and state using the registered evaluators.  Parameters​  Name\tType\tDescriptionmessage\tMessage\tThe message to evaluate. state?\tState\tThe state of the agent.  Returns​  Promise&lt;string[]&gt;  The results of the evaluation.    ","version":"Next","tagName":"h3"},{"title":"getConversationLength​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#getconversationlength","content":" ▸ getConversationLength(): number  Get the number of messages that are kept in the conversation buffer.  Returns​  number  The number of recent messages to be kept in memory.    ","version":"Next","tagName":"h3"},{"title":"processActions​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#processactions","content":" ▸ processActions(message, content, state?): Promise&lt;unknown&gt;  Process the actions of a message.  Parameters​  Name\tType\tDescriptionmessage\tMessage\tThe message to process. content\tContent\tThe content of the message to process actions from. state?\tState\t-  Returns​  Promise&lt;unknown&gt;    ","version":"Next","tagName":"h3"},{"title":"registerAction​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#registeraction","content":" ▸ registerAction(action): void  Register an action for the agent to perform.  Parameters​  Name\tType\tDescriptionaction\tAction\tThe action to register.  Returns​  void    ","version":"Next","tagName":"h3"},{"title":"registerContextProvider​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#registercontextprovider","content":" ▸ registerContextProvider(provider): void  Register a context provider to provide context for message generation.  Parameters​  Name\tType\tDescriptionprovider\tProvider\tThe context provider to register.  Returns​  void    ","version":"Next","tagName":"h3"},{"title":"registerEvaluator​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#registerevaluator","content":" ▸ registerEvaluator(evaluator): void  Register an evaluator to assess and guide the agent's responses.  Parameters​  Name\tType\tDescriptionevaluator\tEvaluator\tThe evaluator to register.  Returns​  void    ","version":"Next","tagName":"h3"},{"title":"retrieveCachedEmbedding​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime#retrievecachedembedding","content":" ▸ retrieveCachedEmbedding(input): Promise&lt;null | number[]&gt;  Parameters​  Name\tTypeinput\tstring  Returns​  Promise&lt;null | number[]&gt; ","version":"Next","tagName":"h3"},{"title":"Function: parseJSONObjectFromText","type":0,"sectionRef":"#","url":"/eliza/api/functions/parseJSONObjectFromText","content":"Function: parseJSONObjectFromText ▸ parseJSONObjectFromText(text): any Parses a JSON object from a given text. The function looks for a JSON block wrapped in triple backticks with json language identifier, and if not found, it searches for an object pattern within the text. It then attempts to parse the JSON string into a JavaScript object. If parsing is successful and the result is an object (but not an array), it returns the object; otherwise, it tries to parse an array if the result is an array, or returns null if parsing is unsuccessful or the result is neither an object nor an array. Parameters​ Name\tType\tDescriptiontext\tstring\tThe input text from which to extract and parse the JSON object. Returns​ any An object parsed from the JSON string if successful; otherwise, null or the result of parsing an array.","keywords":"","version":"Next"},{"title":"eliza","type":0,"sectionRef":"#","url":"/eliza/api/docs/modules","content":"eliza","keywords":"","version":"Next"},{"title":"Function: getLore","type":0,"sectionRef":"#","url":"/eliza/api/functions/getLore","content":"Function: getLore ▸ getLore(params): Promise&lt;Memory[]&gt; Retrieves lore from the lore database based on a search query. This function uses embedding to find similar lore entries. Parameters​ Name\tType\tDefault value\tDescriptionparams\tObject\tundefined\tThe parameters for retrieving lore. params.count?\tnumber\tundefined\tThe maximum number of lore entries to retrieve. params.match_threshold?\tnumber\tundefined\tThe similarity threshold for matching lore entries, lower values mean more strict matching. params.message\tstring\tundefined\tThe search query message to find relevant lore. params.room_id?\t`${string}-${string}-${string}-${string}-${string}`\tzeroUuid\t- params.runtime\tAgentRuntime\tundefined\tThe runtime environment of the agent. Returns​ Promise&lt;Memory[]&gt; A promise that resolves to an array of lore entries that match the search query.","keywords":"","version":"Next"},{"title":"advanced","type":0,"sectionRef":"#","url":"/eliza/api/guides/advanced","content":"advanced","keywords":"","version":"Next"},{"title":"Function: getProviders","type":0,"sectionRef":"#","url":"/eliza/api/functions/getProviders","content":"Function: getProviders ▸ getProviders(runtime, message, state?): Promise&lt;string&gt; Formats provider outputs into a string which can be injected into the context. Parameters​ Name\tType\tDescriptionruntime\tAgentRuntime\tThe Eliza runtime object. message\tMessage\tThe incoming message object. state?\tState\tThe current state object. Returns​ Promise&lt;string&gt; A string that concatenates the outputs of each provider.","keywords":"","version":"Next"},{"title":"configuration","type":0,"sectionRef":"#","url":"/eliza/api/guides/configuration","content":"configuration","keywords":"","version":"Next"},{"title":"installation","type":0,"sectionRef":"#","url":"/eliza/api/installation","content":"installation","keywords":"","version":"Next"},{"title":"Function: getRelationships","type":0,"sectionRef":"#","url":"/eliza/api/functions/getRelationships","content":"Function: getRelationships ▸ getRelationships(«destructured»): Promise&lt;Relationship[]&gt; Parameters​ Name\tType«destructured»\tObject › runtime\tAgentRuntime › user_id\t`${string}-${string}-${string}-${string}-${string}` Returns​ Promise&lt;Relationship[]&gt;","keywords":"","version":"Next"},{"title":"Function: formatActors","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatActors","content":"Function: formatActors ▸ formatActors(actors): string Format actors into a string Parameters​ Name\tType\tDescriptionactors\tObject\tlist of actors actors.actors\tActor[]\t- Returns​ string string","keywords":"","version":"Next"},{"title":"Function: parseJsonArrayFromText","type":0,"sectionRef":"#","url":"/eliza/api/functions/parseJsonArrayFromText","content":"Function: parseJsonArrayFromText ▸ parseJsonArrayFromText(text): null | any[] Parses a JSON array from a given text. The function looks for a JSON block wrapped in triple backticks with json language identifier, and if not found, it searches for an array pattern within the text. It then attempts to parse the JSON string into a JavaScript object. If parsing is successful and the result is an array, it returns the array; otherwise, it returns null. Parameters​ Name\tType\tDescriptiontext\tstring\tThe input text from which to extract and parse the JSON array. Returns​ null | any[] An array parsed from the JSON string if successful; otherwise, null.","keywords":"","version":"Next"},{"title":"basic-usage","type":0,"sectionRef":"#","url":"/eliza/api/guides/basic-usage","content":"basic-usage","keywords":"","version":"Next"},{"title":"Interface: Account","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Account","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account#properties","content":" ","version":"Next","tagName":"h2"},{"title":"avatar_url​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account#avatar_url","content":" • Optional avatar_url: string    ","version":"Next","tagName":"h3"},{"title":"details​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account#details","content":" • Optional details: Object  Index signature​  ▪ [key: string]: unknown    ","version":"Next","tagName":"h3"},{"title":"email​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account#email","content":" • Optional email: string    ","version":"Next","tagName":"h3"},{"title":"id​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account#id","content":" • id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account#name","content":" • name: string ","version":"Next","tagName":"h3"},{"title":"Interface: EvaluationExample","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/EvaluationExample","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: EvaluationExample","url":"/eliza/api/interfaces/EvaluationExample#properties","content":" ","version":"Next","tagName":"h2"},{"title":"context​","type":1,"pageTitle":"Interface: EvaluationExample","url":"/eliza/api/interfaces/EvaluationExample#context","content":" • context: string    ","version":"Next","tagName":"h3"},{"title":"messages​","type":1,"pageTitle":"Interface: EvaluationExample","url":"/eliza/api/interfaces/EvaluationExample#messages","content":" • messages: ActionExample[]    ","version":"Next","tagName":"h3"},{"title":"outcome​","type":1,"pageTitle":"Interface: EvaluationExample","url":"/eliza/api/interfaces/EvaluationExample#outcome","content":" • outcome: string ","version":"Next","tagName":"h3"},{"title":"Interface: Participant","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Participant","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Participant","url":"/eliza/api/interfaces/Participant#properties","content":" ","version":"Next","tagName":"h2"},{"title":"account​","type":1,"pageTitle":"Interface: Participant","url":"/eliza/api/interfaces/Participant#account","content":" • account: Account    ","version":"Next","tagName":"h3"},{"title":"id​","type":1,"pageTitle":"Interface: Participant","url":"/eliza/api/interfaces/Participant#id","content":" • id: `${string}-${string}-${string}-${string}-${string}` ","version":"Next","tagName":"h3"},{"title":"Interface: ActionExample","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/ActionExample","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: ActionExample","url":"/eliza/api/interfaces/ActionExample#properties","content":" ","version":"Next","tagName":"h2"},{"title":"content​","type":1,"pageTitle":"Interface: ActionExample","url":"/eliza/api/interfaces/ActionExample#content","content":" • content: Content    ","version":"Next","tagName":"h3"},{"title":"user​","type":1,"pageTitle":"Interface: ActionExample","url":"/eliza/api/interfaces/ActionExample#user","content":" • user: string ","version":"Next","tagName":"h3"},{"title":"Interface: Actor","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Actor","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Actor","url":"/eliza/api/interfaces/Actor#properties","content":" ","version":"Next","tagName":"h2"},{"title":"details​","type":1,"pageTitle":"Interface: Actor","url":"/eliza/api/interfaces/Actor#details","content":" • details: Object  Type declaration​  Name\tTypequote\tstring summary\tstring tagline\tstring    ","version":"Next","tagName":"h3"},{"title":"id​","type":1,"pageTitle":"Interface: Actor","url":"/eliza/api/interfaces/Actor#id","content":" • id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Interface: Actor","url":"/eliza/api/interfaces/Actor#name","content":" • name: string ","version":"Next","tagName":"h3"},{"title":"Interface: Content","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Content","content":"","keywords":"","version":"Next"},{"title":"Indexable​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content#indexable","content":" ▪ [key: string]: unknown  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content#properties","content":" ","version":"Next","tagName":"h2"},{"title":"action​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content#action","content":" • Optional action: string    ","version":"Next","tagName":"h3"},{"title":"content​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content#content","content":" • content: string    ","version":"Next","tagName":"h3"},{"title":"source​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content#source","content":" • Optional source: string ","version":"Next","tagName":"h3"},{"title":"Interface: ConversationExample","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/ConversationExample","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: ConversationExample","url":"/eliza/api/interfaces/ConversationExample#properties","content":" ","version":"Next","tagName":"h2"},{"title":"content​","type":1,"pageTitle":"Interface: ConversationExample","url":"/eliza/api/interfaces/ConversationExample#content","content":" • content: Content    ","version":"Next","tagName":"h3"},{"title":"user_id​","type":1,"pageTitle":"Interface: ConversationExample","url":"/eliza/api/interfaces/ConversationExample#user_id","content":" • user_id: `${string}-${string}-${string}-${string}-${string}` ","version":"Next","tagName":"h3"},{"title":"Interface: Goal","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Goal","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal#id","content":" • Optional id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal#name","content":" • name: string    ","version":"Next","tagName":"h3"},{"title":"objectives​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal#objectives","content":" • objectives: Objective[]    ","version":"Next","tagName":"h3"},{"title":"room_id​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal#room_id","content":" • room_id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"status​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal#status","content":" • status: GoalStatus    ","version":"Next","tagName":"h3"},{"title":"user_id​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal#user_id","content":" • user_id: `${string}-${string}-${string}-${string}-${string}` ","version":"Next","tagName":"h3"},{"title":"Interface: Action","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Action","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action#properties","content":" ","version":"Next","tagName":"h2"},{"title":"condition​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action#condition","content":" • condition: string    ","version":"Next","tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action#description","content":" • description: string    ","version":"Next","tagName":"h3"},{"title":"examples​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action#examples","content":" • examples: ActionExample[][]    ","version":"Next","tagName":"h3"},{"title":"handler​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action#handler","content":" • handler: Handler    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action#name","content":" • name: string    ","version":"Next","tagName":"h3"},{"title":"validate​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action#validate","content":" • validate: Validator ","version":"Next","tagName":"h3"},{"title":"Function: updateGoal","type":0,"sectionRef":"#","url":"/eliza/api/functions/updateGoal","content":"Function: updateGoal ▸ updateGoal(«destructured»): Promise&lt;void&gt; Parameters​ Name\tType«destructured»\tObject › goal\tGoal › runtime\tAgentRuntime Returns​ Promise&lt;void&gt;","keywords":"","version":"Next"},{"title":"intro","type":0,"sectionRef":"#","url":"/eliza/api/intro","content":"intro","keywords":"","version":"Next"},{"title":"Interface: Evaluator","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Evaluator","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator#properties","content":" ","version":"Next","tagName":"h2"},{"title":"condition​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator#condition","content":" • condition: string    ","version":"Next","tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator#description","content":" • description: string    ","version":"Next","tagName":"h3"},{"title":"examples​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator#examples","content":" • examples: EvaluationExample[]    ","version":"Next","tagName":"h3"},{"title":"handler​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator#handler","content":" • handler: Handler    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator#name","content":" • name: string    ","version":"Next","tagName":"h3"},{"title":"validate​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator#validate","content":" • validate: Validator ","version":"Next","tagName":"h3"},{"title":"Interface: Message","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Message","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Message","url":"/eliza/api/interfaces/Message#properties","content":" ","version":"Next","tagName":"h2"},{"title":"content​","type":1,"pageTitle":"Interface: Message","url":"/eliza/api/interfaces/Message#content","content":" • content: Content    ","version":"Next","tagName":"h3"},{"title":"room_id​","type":1,"pageTitle":"Interface: Message","url":"/eliza/api/interfaces/Message#room_id","content":" • room_id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"user_id​","type":1,"pageTitle":"Interface: Message","url":"/eliza/api/interfaces/Message#user_id","content":" • user_id: `${string}-${string}-${string}-${string}-${string}` ","version":"Next","tagName":"h3"},{"title":"eliza","type":0,"sectionRef":"#","url":"/eliza/api/modules","content":"eliza","keywords":"","version":"Next"},{"title":"Type alias: Handler","type":0,"sectionRef":"#","url":"/eliza/api/types/Handler","content":"Type alias: Handler Ƭ Handler: (runtime: AgentRuntime, message: Message, state?: State, options?: { [key: string]: unknown; }) =&gt; Promise&lt;unknown&gt; Represents the type of a handler function, which takes a runtime instance, a message, and an optional state, and returns a promise resolving to any type. Type declaration​ ▸ (runtime, message, state?, options?): Promise&lt;unknown&gt; Parameters​ Name\tTyperuntime\tAgentRuntime message\tMessage state?\tState options?\tObject Returns​ Promise&lt;unknown&gt;","keywords":"","version":"Next"},{"title":"Variable: defaultProviders","type":0,"sectionRef":"#","url":"/eliza/api/variables/defaultProviders","content":"Variable: defaultProviders • Const defaultProviders: Provider[]","keywords":"","version":"Next"},{"title":"Interface: State","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/State","content":"","keywords":"","version":"Next"},{"title":"Indexable​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#indexable","content":" ▪ [key: string]: unknown  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#properties","content":" ","version":"Next","tagName":"h2"},{"title":"actionExamples​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#actionexamples","content":" • Optional actionExamples: string    ","version":"Next","tagName":"h3"},{"title":"actionNames​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#actionnames","content":" • Optional actionNames: string    ","version":"Next","tagName":"h3"},{"title":"actions​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#actions","content":" • Optional actions: string    ","version":"Next","tagName":"h3"},{"title":"actionsData​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#actionsdata","content":" • Optional actionsData: Action[]    ","version":"Next","tagName":"h3"},{"title":"actors​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#actors","content":" • actors: string    ","version":"Next","tagName":"h3"},{"title":"actorsData​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#actorsdata","content":" • Optional actorsData: Actor[]    ","version":"Next","tagName":"h3"},{"title":"agentId​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#agentid","content":" • Optional agentId: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"agentName​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#agentname","content":" • Optional agentName: string    ","version":"Next","tagName":"h3"},{"title":"goals​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#goals","content":" • Optional goals: string    ","version":"Next","tagName":"h3"},{"title":"goalsData​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#goalsdata","content":" • Optional goalsData: Goal[]    ","version":"Next","tagName":"h3"},{"title":"providers​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#providers","content":" • Optional providers: string    ","version":"Next","tagName":"h3"},{"title":"recentFacts​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#recentfacts","content":" • Optional recentFacts: string    ","version":"Next","tagName":"h3"},{"title":"recentFactsData​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#recentfactsdata","content":" • Optional recentFactsData: Memory[]    ","version":"Next","tagName":"h3"},{"title":"recentMessages​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#recentmessages","content":" • recentMessages: string    ","version":"Next","tagName":"h3"},{"title":"recentMessagesData​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#recentmessagesdata","content":" • recentMessagesData: Memory[]    ","version":"Next","tagName":"h3"},{"title":"relevantFacts​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#relevantfacts","content":" • Optional relevantFacts: string    ","version":"Next","tagName":"h3"},{"title":"relevantFactsData​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#relevantfactsdata","content":" • Optional relevantFactsData: Memory[]    ","version":"Next","tagName":"h3"},{"title":"responseData​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#responsedata","content":" • Optional responseData: Content    ","version":"Next","tagName":"h3"},{"title":"room_id​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#room_id","content":" • room_id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"senderName​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#sendername","content":" • Optional senderName: string    ","version":"Next","tagName":"h3"},{"title":"user_id​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State#user_id","content":" • Optional user_id: `${string}-${string}-${string}-${string}-${string}` ","version":"Next","tagName":"h3"},{"title":"Variable: embeddingZeroVector","type":0,"sectionRef":"#","url":"/eliza/api/variables/embeddingZeroVector","content":"Variable: embeddingZeroVector • Const embeddingZeroVector: any[]","keywords":"","version":"Next"},{"title":"Interface: MessageExample","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/MessageExample","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: MessageExample","url":"/eliza/api/interfaces/MessageExample#properties","content":" ","version":"Next","tagName":"h2"},{"title":"content​","type":1,"pageTitle":"Interface: MessageExample","url":"/eliza/api/interfaces/MessageExample#content","content":" • content: Content    ","version":"Next","tagName":"h3"},{"title":"user​","type":1,"pageTitle":"Interface: MessageExample","url":"/eliza/api/interfaces/MessageExample#user","content":" • user: string ","version":"Next","tagName":"h3"},{"title":"Interface: Objective","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Objective","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Objective","url":"/eliza/api/interfaces/Objective#properties","content":" ","version":"Next","tagName":"h2"},{"title":"completed​","type":1,"pageTitle":"Interface: Objective","url":"/eliza/api/interfaces/Objective#completed","content":" • completed: boolean    ","version":"Next","tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Interface: Objective","url":"/eliza/api/interfaces/Objective#description","content":" • description: string    ","version":"Next","tagName":"h3"},{"title":"id​","type":1,"pageTitle":"Interface: Objective","url":"/eliza/api/interfaces/Objective#id","content":" • Optional id: string ","version":"Next","tagName":"h3"},{"title":"Room Model","type":0,"sectionRef":"#","url":"/eliza/api/rooms","content":"","keywords":"","version":"Next"},{"title":"Key Concepts​","type":1,"pageTitle":"Room Model","url":"/eliza/api/rooms#key-concepts","content":" ","version":"Next","tagName":"h2"},{"title":"Room​","type":1,"pageTitle":"Room Model","url":"/eliza/api/rooms#room","content":" A room contains a list of participants which can be agents or users, and can be added or removed from at any time. The room is keyed by the room_id.  ","version":"Next","tagName":"h3"},{"title":"Participant​","type":1,"pageTitle":"Room Model","url":"/eliza/api/rooms#participant","content":" A participant is an agent or user that is part of the room. Participants are identified by their 'user_id' which is keyed to the account of the user or agent.  ","version":"Next","tagName":"h3"},{"title":"Ensuring that a Room and Participant Exists​","type":1,"pageTitle":"Room Model","url":"/eliza/api/rooms#ensuring-that-a-room-and-participant-exists","content":" Every memory needs to be associated with a room and a participant. On databases where foreign keys are available, we try to enforce this constraint.  When handling messages, you can use the built-in AgentRuntime.ensureRoomExists(user_id, room_id) and AgentRuntime.ensureParticipantExists() methods to ensure that the room and participant are correctly set up. A wrapper function has also been added to the runtime to make this easier: AgentRuntime.ensureConnection(user_id, room_id, user_name, user_screen_name, source). ","version":"Next","tagName":"h3"},{"title":"Interface: Room","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Room","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Room","url":"/eliza/api/interfaces/Room#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id​","type":1,"pageTitle":"Interface: Room","url":"/eliza/api/interfaces/Room#id","content":" • id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"participants​","type":1,"pageTitle":"Interface: Room","url":"/eliza/api/interfaces/Room#participants","content":" • participants: Participant[] ","version":"Next","tagName":"h3"},{"title":"quickstart","type":0,"sectionRef":"#","url":"/eliza/api/quickstart","content":"quickstart","keywords":"","version":"Next"},{"title":"Interface: Memory","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Memory","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory#properties","content":" ","version":"Next","tagName":"h2"},{"title":"content​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory#content","content":" • content: Content    ","version":"Next","tagName":"h3"},{"title":"created_at​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory#created_at","content":" • Optional created_at: string    ","version":"Next","tagName":"h3"},{"title":"embedding​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory#embedding","content":" • Optional embedding: number[]    ","version":"Next","tagName":"h3"},{"title":"id​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory#id","content":" • Optional id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"room_id​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory#room_id","content":" • room_id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"user_id​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory#user_id","content":" • user_id: `${string}-${string}-${string}-${string}-${string}` ","version":"Next","tagName":"h3"},{"title":"Type alias: Validator","type":0,"sectionRef":"#","url":"/eliza/api/types/Validator","content":"Type alias: Validator Ƭ Validator: (runtime: AgentRuntime, message: Message, state?: State) =&gt; Promise&lt;boolean&gt; Represents the type of a validator function, which takes a runtime instance, a message, and an optional state, and returns a promise resolving to a boolean indicating whether the validation passed. Type declaration​ ▸ (runtime, message, state?): Promise&lt;boolean&gt; Parameters​ Name\tTyperuntime\tAgentRuntime message\tMessage state?\tState Returns​ Promise&lt;boolean&gt;","keywords":"","version":"Next"},{"title":"Variable: embeddingDimension","type":0,"sectionRef":"#","url":"/eliza/api/variables/embeddingDimension","content":"Variable: embeddingDimension • Const embeddingDimension: 1536","keywords":"","version":"Next"},{"title":"Interface: Provider","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Provider","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Provider","url":"/eliza/api/interfaces/Provider#properties","content":" ","version":"Next","tagName":"h2"},{"title":"get​","type":1,"pageTitle":"Interface: Provider","url":"/eliza/api/interfaces/Provider#get","content":" • get: (runtime: AgentRuntime, message: Message, state?: State) =&gt; Promise&lt;unknown&gt;  Type declaration​  ▸ (runtime, message, state?): Promise&lt;unknown&gt;  Parameters​  Name\tTyperuntime\tAgentRuntime message\tMessage state?\tState  Returns​  Promise&lt;unknown&gt; ","version":"Next","tagName":"h3"},{"title":"basic-usage","type":0,"sectionRef":"#","url":"/eliza/docs/guides/basic-usage","content":"basic-usage","keywords":"","version":"Next"},{"title":"Variable: defaultEvaluators","type":0,"sectionRef":"#","url":"/eliza/api/variables/defaultEvaluators","content":"Variable: defaultEvaluators • Const defaultEvaluators: Evaluator[]","keywords":"","version":"Next"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/eliza/docs/intro","content":"Introduction As seen powering @DegenSpartanAI and @MarcAIndreessen Multi-agent simulation frameworkAdd as many unique characters as you want with characterfileFull-featured Discord and Twitter connectors, with Discord voice channel supportFull conversational and document RAG memoryCan read links and PDFs, transcribe audio and videos, summarize conversations, and moreHighly extensible - create your own actions and clients to extend Eliza's capabilitiesSupports open source and local models (default configured with Nous Hermes Llama 3.1B)Supports OpenAI for cloud inference on a light-weight device&quot;Ask Claude&quot; mode for calling Claude on more complex queries100% Typescript","keywords":"","version":"Next"},{"title":"Interface: Relationship","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Relationship","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship#properties","content":" ","version":"Next","tagName":"h2"},{"title":"created_at​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship#created_at","content":" • Optional created_at: string    ","version":"Next","tagName":"h3"},{"title":"id​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship#id","content":" • id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"room_id​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship#room_id","content":" • room_id: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"status​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship#status","content":" • status: string    ","version":"Next","tagName":"h3"},{"title":"user_a​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship#user_a","content":" • user_a: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"user_b​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship#user_b","content":" • user_b: `${string}-${string}-${string}-${string}-${string}`    ","version":"Next","tagName":"h3"},{"title":"user_id​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship#user_id","content":" • user_id: `${string}-${string}-${string}-${string}-${string}` ","version":"Next","tagName":"h3"},{"title":"Variable: messageHandlerTemplate","type":0,"sectionRef":"#","url":"/eliza/api/variables/messageHandlerTemplate","content":"Variable: messageHandlerTemplate • Const messageHandlerTemplate: &quot;{{actionExamples}}\\n\\n# IMPORTANT: DO NOT USE THE INFORMATION FROM THE EXAMPLES ABOVE. THE EXAMPLES ARE FOR REFERENCE ONLY.\\n\\n~~~\\n\\n# TASK: GENERATE THE NEXT MESSAGE IN THE SCENE FOR {{agentName}}\\n- Generate the next message in the scene for {{agentName}}\\n- {{agentName}} is not an assistant - do not write assistant-like responses or ask questions\\n- Include content and action in the response\\n- Available actions are {{actionNames}}\\n\\n{{lore}}\\n{{relevantFacts}}\\n{{recentFacts}}\\n{{goals}}\\n{{actors}}\\n{{actionNames}}\\n{{actions}}\\n{{providers}}\\n\\n# INSTRUCTIONS: Generate the next message in the scene for {{agentName}}\\n\\nResponse format should be formatted in a JSON block like this:\\n```json\\n{ \\&quot;user\\&quot;: \\&quot;{{agentName}}\\&quot;, \\&quot;content\\&quot;: string, \\&quot;action\\&quot;: string }\\n```\\n\\n{{recentMessages}}&quot;","keywords":"","version":"Next"},{"title":"Class: DatabaseAdapter","type":0,"sectionRef":"#","url":"/eliza/api/classes/DatabaseAdapter","content":"","keywords":"","version":"Next"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#hierarchy","content":" DatabaseAdapter ↳ SupabaseDatabaseAdapter ↳ SqliteDatabaseAdapter ↳ SqlJsDatabaseAdapter  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#constructor","content":" • new DatabaseAdapter(): DatabaseAdapter  Returns​  DatabaseAdapter  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#methods","content":" ","version":"Next","tagName":"h2"},{"title":"addParticipant​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#addparticipant","content":" ▸ addParticipant(user_id, room_id): Promise&lt;boolean&gt;  Adds a user as a participant to a specific room.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user to add as a participant. room_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to which the user will be added.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.    ","version":"Next","tagName":"h3"},{"title":"countMemories​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#countmemories","content":" ▸ countMemories(room_id, unique?, tableName?): Promise&lt;number&gt;  Counts the number of memories in a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room for which to count memories. unique?\tboolean\tSpecifies whether to count only unique memories. tableName?\tstring\tOptional table name to count memories from.  Returns​  Promise&lt;number&gt;  A Promise that resolves to the number of memories.    ","version":"Next","tagName":"h3"},{"title":"createAccount​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#createaccount","content":" ▸ createAccount(account): Promise&lt;boolean&gt;  Creates a new account in the database.  Parameters​  Name\tType\tDescriptionaccount\tAccount\tThe account object to create.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves when the account creation is complete.    ","version":"Next","tagName":"h3"},{"title":"createGoal​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#creategoal","content":" ▸ createGoal(goal): Promise&lt;void&gt;  Creates a new goal in the database.  Parameters​  Name\tType\tDescriptiongoal\tGoal\tThe goal object to create.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been created.    ","version":"Next","tagName":"h3"},{"title":"createMemory​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#creatememory","content":" ▸ createMemory(memory, tableName, unique?): Promise&lt;void&gt;  Creates a new memory in the database.  Parameters​  Name\tType\tDescriptionmemory\tMemory\tThe memory object to create. tableName\tstring\tThe table where the memory should be stored. unique?\tboolean\tIndicates if the memory should be unique.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been created.    ","version":"Next","tagName":"h3"},{"title":"createRelationship​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#createrelationship","content":" ▸ createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two users.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUIDs of the two users (userA and userB). params.userA\t`${string}-${string}-${string}-${string}-${string}`\t- params.userB\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.    ","version":"Next","tagName":"h3"},{"title":"createRoom​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#createroom","content":" ▸ createRoom(room_id?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new room with an optional specified ID.  Parameters​  Name\tType\tDescriptionroom_id?\t`${string}-${string}-${string}-${string}-${string}`\tOptional UUID to assign to the new room.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the UUID of the created room.    ","version":"Next","tagName":"h3"},{"title":"getAccountById​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getaccountbyid","content":" ▸ getAccountById(user_id): Promise&lt;null | Account&gt;  Retrieves an account by its ID.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user account to retrieve.  Returns​  Promise&lt;null | Account&gt;  A Promise that resolves to the Account object or null if not found.    ","version":"Next","tagName":"h3"},{"title":"getActorDetails​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getactordetails","content":" ▸ getActorDetails(params): Promise&lt;Actor[]&gt;  Retrieves details of actors in a given room.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the room_id to search for actors. params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Actor[]&gt;  A Promise that resolves to an array of Actor objects.    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getcachedembeddings","content":" ▸ getCachedEmbeddings(params): Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;  Retrieves cached embeddings based on the specified query parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the embedding retrieval. params.query_field_name\tstring\t- params.query_field_sub_name\tstring\t- params.query_input\tstring\t- params.query_match_count\tnumber\t- params.query_table_name\tstring\t- params.query_threshold\tnumber\t-  Returns​  Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;  A Promise that resolves to an array of objects containing embeddings and levenshtein scores.    ","version":"Next","tagName":"h3"},{"title":"getGoals​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getgoals","content":" ▸ getGoals(params): Promise&lt;Goal[]&gt;  Retrieves goals based on specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for goal retrieval. params.count?\tnumber\t- params.onlyInProgress?\tboolean\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.user_id?\tnull | `${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Goal[]&gt;  A Promise that resolves to an array of Goal objects.    ","version":"Next","tagName":"h3"},{"title":"getMemories​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getmemories","content":" ▸ getMemories(params): Promise&lt;Memory[]&gt;  Retrieves memories based on the specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the memory retrieval. params.count?\tnumber\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique?\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForAccount​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getparticipantsforaccount","content":" ▸ getParticipantsForAccount(user_id): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the account.  Returns​  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  ▸ getParticipantsForAccount(user_id): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the account.  Returns​  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForRoom​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getparticipantsforroom","content":" ▸ getParticipantsForRoom(room_id): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves participants for a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room for which to retrieve participants.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of UUIDs representing the participants.    ","version":"Next","tagName":"h3"},{"title":"getRelationship​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getrelationship","content":" ▸ getRelationship(params): Promise&lt;null | Relationship&gt;  Retrieves a relationship between two users if it exists.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUIDs of the two users (userA and userB). params.userA\t`${string}-${string}-${string}-${string}-${string}`\t- params.userB\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;null | Relationship&gt;  A Promise that resolves to the Relationship object or null if not found.    ","version":"Next","tagName":"h3"},{"title":"getRelationships​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getrelationships","content":" ▸ getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific user.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUID of the user. params.user_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Relationship[]&gt;  A Promise that resolves to an array of Relationship objects.    ","version":"Next","tagName":"h3"},{"title":"getRoom​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getroom","content":" ▸ getRoom(room_id): Promise&lt;null | `${string}-${string}-${string}-${string}-${string}`&gt;  Retrieves the room ID for a given room, if it exists.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to retrieve.  Returns​  Promise&lt;null | `${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the room ID or null if not found.    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipant​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getroomsforparticipant","content":" ▸ getRoomsForParticipant(user_id): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which a specific user is a participant.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipants​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#getroomsforparticipants","content":" ▸ getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which specific users are participants.  Parameters​  Name\tType\tDescriptionuserIds\t`${string}-${string}-${string}-${string}-${string}`[]\tAn array of UUIDs of the users.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.    ","version":"Next","tagName":"h3"},{"title":"log​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#log","content":" ▸ log(params): Promise&lt;void&gt;  Logs an event or action with the specified details.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the log entry. params.body\tObject\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.type\tstring\t- params.user_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;void&gt;  A Promise that resolves when the log entry has been saved.    ","version":"Next","tagName":"h3"},{"title":"removeAllGoals​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#removeallgoals","content":" ▸ removeAllGoals(room_id): Promise&lt;void&gt;  Removes all goals associated with a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room whose goals should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all goals have been removed.    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#removeallmemories","content":" ▸ removeAllMemories(room_id, tableName): Promise&lt;void&gt;  Removes all memories associated with a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room whose memories should be removed. tableName\tstring\tThe table from which the memories should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.    ","version":"Next","tagName":"h3"},{"title":"removeGoal​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#removegoal","content":" ▸ removeGoal(goalId): Promise&lt;void&gt;  Removes a specific goal from the database.  Parameters​  Name\tType\tDescriptiongoalId\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the goal to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been removed.    ","version":"Next","tagName":"h3"},{"title":"removeMemory​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#removememory","content":" ▸ removeMemory(memoryId, tableName): Promise&lt;void&gt;  Removes a specific memory from the database.  Parameters​  Name\tType\tDescriptionmemoryId\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the memory to remove. tableName\tstring\tThe table from which the memory should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been removed.    ","version":"Next","tagName":"h3"},{"title":"removeParticipant​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#removeparticipant","content":" ▸ removeParticipant(user_id, room_id): Promise&lt;boolean&gt;  Removes a user as a participant from a specific room.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user to remove as a participant. room_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room from which the user will be removed.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.    ","version":"Next","tagName":"h3"},{"title":"removeRoom​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#removeroom","content":" ▸ removeRoom(room_id): Promise&lt;void&gt;  Removes a specific room from the database.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the room has been removed.    ","version":"Next","tagName":"h3"},{"title":"searchMemories​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#searchmemories","content":" ▸ searchMemories(params): Promise&lt;Memory[]&gt;  Searches for memories based on embeddings and other specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the memory search. params.embedding\tnumber[]\t- params.match_count\tnumber\t- params.match_threshold\tnumber\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#searchmemoriesbyembedding","content":" ▸ searchMemoriesByEmbedding(embedding, params): Promise&lt;Memory[]&gt;  Searches for memories by embedding and other specified parameters.  Parameters​  Name\tType\tDescriptionembedding\tnumber[]\tThe embedding vector to search with. params\tObject\tAdditional parameters for the search. params.count?\tnumber\t- params.match_threshold?\tnumber\t- params.room_id?\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique?\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.    ","version":"Next","tagName":"h3"},{"title":"updateGoal​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#updategoal","content":" ▸ updateGoal(goal): Promise&lt;void&gt;  Updates a specific goal in the database.  Parameters​  Name\tType\tDescriptiongoal\tGoal\tThe goal object with updated properties.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been updated.    ","version":"Next","tagName":"h3"},{"title":"updateGoalStatus​","type":1,"pageTitle":"Class: DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter#updategoalstatus","content":" ▸ updateGoalStatus(params): Promise&lt;void&gt;  Updates the status of a specific goal.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the goalId and the new status. params.goalId\t`${string}-${string}-${string}-${string}-${string}`\t- params.status\tGoalStatus\t-  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal status has been updated. ","version":"Next","tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/eliza/docs/installation","content":"","keywords":"","version":"Next"},{"title":"Select your database adapter​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation#select-your-database-adapter","content":" npm install sqlite-vss better-sqlite3 # for sqlite (simple, for local development) npm install @supabase/supabase-js # for supabase (more complicated but can be deployed at scale)   ","version":"Next","tagName":"h2"},{"title":"Set up environment variables​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation#set-up-environment-variables","content":" You will need a Supbase account, as well as an OpenAI developer account.  Copy and paste the .dev.vars.example to .dev.vars and fill in the environment variables:  SUPABASE_URL=&quot;https://your-supabase-url.supabase.co&quot; SUPABASE_SERVICE_API_KEY=&quot;your-supabase-service-api-key&quot; OPENAI_API_KEY=&quot;your-openai-api-key&quot;   ","version":"Next","tagName":"h3"},{"title":"SQLite Local Setup (Easiest)​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation#sqlite-local-setup-easiest","content":" You can use SQLite for local development. This is the easiest way to get started with eliza.  import { BgentRuntime, SqliteDatabaseAdapter } from &quot;eliza&quot;; import { Database } from &quot;sqlite3&quot;; const sqliteDatabaseAdapter = new SqliteDatabaseAdapter(new Database(&quot;:memory:&quot;)); const runtime = new BgentRuntime({ serverUrl: &quot;https://api.openai.com/v1&quot;, token: process.env.OPENAI_API_KEY, // Can be an API key or JWT token for your AI services databaseAdapter: sqliteDatabaseAdapter, // ... other options });   ","version":"Next","tagName":"h3"},{"title":"Supabase Local Setup​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation#supabase-local-setup","content":" First, you will need to install the Supabase CLI. You can install it using the instructions here.  Once you have the CLI installed, you can run the following commands to set up a local Supabase instance:  supabase init supabase start   You can now start the eliza project with npm run dev and it will connect to the local Supabase instance by default.  NOTE: You will need Docker installed for this to work. If that is an issue for you, use the Supabase Cloud Setup instructions instead below).  ","version":"Next","tagName":"h3"},{"title":"Supabase Cloud Setup​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation#supabase-cloud-setup","content":" This library uses Supabase as a database. You can set up a free account at supabase.io and create a new project.  Step 1: On the Subase All Projects Dashboard, select “New Project”.Step 2: Select the organization to store the new project in, assign a database name, password and region.Step 3: Select “Create New Project”.Step 4: Wait for the database to setup. This will take a few minutes as supabase setups various directories.Step 5: Select the “SQL Editor” tab from the left navigation menu.Step 6: Copy in your own SQL dump file or optionally use the provided file in the eliza directory at: &quot;src/supabase/db.sql&quot;. Note: You can use the command &quot;supabase db dump&quot; if you have a pre-exisiting supabase database to generate the SQL dump file.Step 7: Paste the SQL code into the SQL Editor and hit run in the bottom right.Step 8: Select the “Databases” tab from the left navigation menu to verify all of the tables have been added properly.  Once you've set up your Supabase project, you can find your API key by going to the &quot;Settings&quot; tab and then &quot;API&quot;. You will need to set the SUPABASE_URL and SUPABASE_SERVICE_API_KEY environment variables in your .dev.vars file.  ","version":"Next","tagName":"h3"},{"title":"Local Model Setup​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation#local-model-setup","content":" While eliza uses ChatGPT 3.5 by default, you can use a local model by setting the serverUrl to a local endpoint. The LocalAI project is a great way to run a local model with a compatible API endpoint.  const runtime = new BgentRuntime({ serverUrl: process.env.LOCALAI_URL, token: process.env.LOCALAI_TOKEN, // Can be an API key or JWT token for your AI service // ... other options });   ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation#development","content":" npm run dev # start the server npm run shell # start the shell in another terminal to talk to the default agent   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation#usage","content":"  import { BgentRuntime, SupabaseDatabaseAdapter, SqliteDatabaseAdapter } from &quot;eliza&quot;; const sqliteDatabaseAdapter = new SqliteDatabaseAdapter(new Database(&quot;:memory:&quot;)); // You can also use Supabase like this // const supabaseDatabaseAdapter = new SupabaseDatabaseAdapter( // process.env.SUPABASE_URL, // process.env.SUPABASE_SERVICE_API_KEY) // ; const runtime = new BgentRuntime({ serverUrl: &quot;https://api.openai.com/v1&quot;, token: process.env.OPENAI_API_KEY, // Can be an API key or JWT token for your AI services databaseAdapter: sqliteDatabaseAdapter, actions: [ /* your custom actions */ ], evaluators: [ /* your custom evaluators */ ], model: &quot;gpt-3.5-turbo&quot;, // whatever model you want to use embeddingModel: &quot;text-embedding-3-small&quot;, // whatever model you want to use });  ","version":"Next","tagName":"h3"},{"title":"configuration","type":0,"sectionRef":"#","url":"/eliza/docs/guides/configuration","content":"configuration","keywords":"","version":"Next"},{"title":"advanced","type":0,"sectionRef":"#","url":"/eliza/docs/guides/advanced","content":"advanced","keywords":"","version":"Next"},{"title":"Variable: evaluationTemplate","type":0,"sectionRef":"#","url":"/eliza/api/variables/evaluationTemplate","content":"Variable: evaluationTemplate • Const evaluationTemplate: &quot;TASK: Based on the conversation and conditions, determine which evaluation functions are appropriate to call.\\nExamples:\\n{{evaluatorExamples}}\\n\\nINSTRUCTIONS: You are helping me to decide which appropriate functions to call based on the conversation between {{senderName}} and {{agentName}}.\\n\\n{{recentMessages}}\\n\\nEvaluator Functions:\\n{{evaluators}}\\n\\nEvaluator Conditions:\\n{{evaluatorConditions}}\\n\\nTASK: Based on the most recent conversation, determine which evaluators functions are appropriate to call to call.\\nInclude the name of evaluators that are relevant and should be called in the array\\nAvailable evaluator names to include are {{evaluatorNames}}\\nRespond with a JSON array containing a field for description in a JSON block formatted for markdown with this structure:\\n```json\\n[\\n 'evaluatorName',\\n 'evaluatorName'\\n]\\n```\\n\\nYour response must include the JSON block.&quot; Template used for the evaluation completion.","keywords":"","version":"Next"},{"title":"Character Files","type":0,"sectionRef":"#","url":"/eliza/docs/guides/characterfile","content":"","keywords":"","version":"Next"},{"title":"Structure Overview​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#structure-overview","content":" A character file contains several key sections that work together to define the character's personality and behavior:  { &quot;name&quot;: &quot;character_name&quot;, &quot;bio&quot;: [], &quot;lore&quot;: [], &quot;knowledge&quot;: [], &quot;messageExamples&quot;: [], &quot;postExamples&quot;: [], &quot;topics&quot;: [], &quot;style&quot;: {}, &quot;adjectives&quot;: [] }   ","version":"Next","tagName":"h2"},{"title":"Core Components​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#core-components","content":" ","version":"Next","tagName":"h2"},{"title":"Bio Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#bio-array","content":" Contains biographical information about the characterCan be a single comprehensive biography or multiple shorter statementsMultiple statements are randomized to create variety in responsesExample:  &quot;bio&quot;: [ &quot;Mark Andreessen is an American entrepreneur and investor&quot;, &quot;Co-founder of Netscape and Andreessen Horowitz&quot;, &quot;Pioneer of the early web, created NCSA Mosaic&quot; ]   ","version":"Next","tagName":"h3"},{"title":"Lore Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#lore-array","content":" Contains interesting facts and details about the characterHelps define personality and unique traitsGets randomly sampled during conversationsExample:  &quot;lore&quot;: [ &quot;Believes strongly in the power of software to transform industries&quot;, &quot;Known for saying 'Software is eating the world'&quot;, &quot;Early investor in Facebook, Twitter, and other tech giants&quot; ]   ","version":"Next","tagName":"h3"},{"title":"Knowledge Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#knowledge-array","content":" Used for RAG (Retrieval Augmented Generation)Can contain chunks of text from articles, books, or other sourcesHelps ground the character's responses in factual informationCan be generated from PDFs or other documents using provided tools  ","version":"Next","tagName":"h3"},{"title":"Message Examples​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#message-examples","content":" Sample conversations between users and the characterHelps establish the character's conversational styleShould cover various topics and scenariosExample:  &quot;messageExamples&quot;: [ [ {&quot;user&quot;: &quot;user1&quot;, &quot;content&quot;: {&quot;text&quot;: &quot;What's your view on AI?&quot;}}, {&quot;user&quot;: &quot;character&quot;, &quot;content&quot;: {&quot;text&quot;: &quot;AI is transforming every industry...&quot;}} ] ]   ","version":"Next","tagName":"h3"},{"title":"Style Object​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#style-object","content":" Contains three key sections:  all: General style instructions for all interactionschat: Specific instructions for chat interactionspost: Specific instructions for social media posts  Each section can contain multiple instructions that guide the character's communication style.  ","version":"Next","tagName":"h3"},{"title":"Topics Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#topics-array","content":" List of subjects the character is interested in or knowledgeable aboutUsed to guide conversations and generate relevant contentHelps maintain character consistency  ","version":"Next","tagName":"h3"},{"title":"Adjectives Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#adjectives-array","content":" Words that describe the character's traits and personalityUsed for generating responses with consistent toneCan be used in &quot;Mad Libs&quot; style content generation  ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#best-practices","content":" Randomization for Variety Break bio and lore into smaller chunksThis creates more natural, varied responsesPrevents repetitive or predictable behavior Knowledge Management Use the provided tools to convert documents into knowledge: npx folder2knowledge &lt;path/to/folder&gt; npx knowledge2character &lt;character-file&gt; &lt;knowledge-file&gt; Style Instructions Be specific about communication patternsInclude both dos and don'tsConsider platform-specific behavior (chat vs posts) Message Examples Include diverse scenariosShow character-specific responsesDemonstrate typical interaction patterns  ","version":"Next","tagName":"h2"},{"title":"Tools and Utilities​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#tools-and-utilities","content":" Generate from Twitter  npx tweets2character   Convert Documents to Knowledge  npx folder2knowledge &lt;path/to/folder&gt;   Add Knowledge to Character  npx knowledge2character &lt;character-file&gt; &lt;knowledge-file&gt;   ","version":"Next","tagName":"h2"},{"title":"Context Length Considerations​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#context-length-considerations","content":" Modern LLMs support longer contexts (128k tokens)No strict limits on section lengthsFocus on quality and relevance rather than sizeConsider randomization for large collections of information  ","version":"Next","tagName":"h2"},{"title":"Validation​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#validation","content":" You can validate your character file against the schema using provided tools:  # Python python examples/validate.py # JavaScript node examples/validate.mjs   ","version":"Next","tagName":"h2"},{"title":"Tips for Quality​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/guides/characterfile#tips-for-quality","content":" Bio and Lore Mix factual and personality-defining informationInclude both historical and current detailsBreak into modular, reusable pieces Style Instructions Be specific about tone and mannerismsInclude platform-specific guidanceDefine clear boundaries and limitations Examples Cover common scenariosShow character-specific reactionsDemonstrate proper tone and style Knowledge Focus on relevant informationOrganize in digestible chunksUpdate regularly to maintain relevance ","version":"Next","tagName":"h2"},{"title":"Variable: defaultActions","type":0,"sectionRef":"#","url":"/eliza/api/variables/defaultActions","content":"Variable: defaultActions • Const defaultActions: Action[]","keywords":"","version":"Next"},{"title":"Class: SqliteDatabaseAdapter","type":0,"sectionRef":"#","url":"/eliza/api/classes/SqliteDatabaseAdapter","content":"","keywords":"","version":"Next"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#hierarchy","content":" DatabaseAdapter ↳ SqliteDatabaseAdapter  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#constructor","content":" • new SqliteDatabaseAdapter(db): SqliteDatabaseAdapter  Parameters​  Name\tTypedb\tDatabase  Returns​  SqliteDatabaseAdapter  Overrides​  DatabaseAdapter.constructor  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#properties","content":" ","version":"Next","tagName":"h2"},{"title":"db​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#db","content":" • db: Database  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#methods","content":" ","version":"Next","tagName":"h2"},{"title":"addParticipant​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#addparticipant","content":" ▸ addParticipant(user_id, room_id): Promise&lt;boolean&gt;  Adds a user as a participant to a specific room.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user to add as a participant. room_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to which the user will be added.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.addParticipant    ","version":"Next","tagName":"h3"},{"title":"countMemories​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#countmemories","content":" ▸ countMemories(room_id, unique?, tableName?): Promise&lt;number&gt;  Counts the number of memories in a specific room.  Parameters​  Name\tType\tDefault value\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tundefined\tThe UUID of the room for which to count memories. unique\tboolean\ttrue\tSpecifies whether to count only unique memories. tableName\tstring\t&quot;&quot;\tOptional table name to count memories from.  Returns​  Promise&lt;number&gt;  A Promise that resolves to the number of memories.  Overrides​  DatabaseAdapter.countMemories    ","version":"Next","tagName":"h3"},{"title":"createAccount​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#createaccount","content":" ▸ createAccount(account): Promise&lt;boolean&gt;  Creates a new account in the database.  Parameters​  Name\tType\tDescriptionaccount\tAccount\tThe account object to create.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves when the account creation is complete.  Overrides​  DatabaseAdapter.createAccount    ","version":"Next","tagName":"h3"},{"title":"createGoal​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#creategoal","content":" ▸ createGoal(goal): Promise&lt;void&gt;  Creates a new goal in the database.  Parameters​  Name\tType\tDescriptiongoal\tGoal\tThe goal object to create.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been created.  Overrides​  DatabaseAdapter.createGoal    ","version":"Next","tagName":"h3"},{"title":"createMemory​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#creatememory","content":" ▸ createMemory(memory, tableName): Promise&lt;void&gt;  Creates a new memory in the database.  Parameters​  Name\tType\tDescriptionmemory\tMemory\tThe memory object to create. tableName\tstring\tThe table where the memory should be stored.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been created.  Overrides​  DatabaseAdapter.createMemory    ","version":"Next","tagName":"h3"},{"title":"createRelationship​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#createrelationship","content":" ▸ createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two users.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUIDs of the two users (userA and userB). params.userA\t`${string}-${string}-${string}-${string}-${string}`\t- params.userB\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Overrides​  DatabaseAdapter.createRelationship    ","version":"Next","tagName":"h3"},{"title":"createRoom​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#createroom","content":" ▸ createRoom(room_id?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new room with an optional specified ID.  Parameters​  Name\tType\tDescriptionroom_id?\t`${string}-${string}-${string}-${string}-${string}`\tOptional UUID to assign to the new room.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the UUID of the created room.  Overrides​  DatabaseAdapter.createRoom    ","version":"Next","tagName":"h3"},{"title":"getAccountById​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getaccountbyid","content":" ▸ getAccountById(user_id): Promise&lt;null | Account&gt;  Retrieves an account by its ID.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user account to retrieve.  Returns​  Promise&lt;null | Account&gt;  A Promise that resolves to the Account object or null if not found.  Overrides​  DatabaseAdapter.getAccountById    ","version":"Next","tagName":"h3"},{"title":"getActorDetails​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getactordetails","content":" ▸ getActorDetails(params): Promise&lt;Actor[]&gt;  Retrieves details of actors in a given room.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the room_id to search for actors. params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Actor[]&gt;  A Promise that resolves to an array of Actor objects.  Overrides​  DatabaseAdapter.getActorDetails    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getcachedembeddings","content":" ▸ getCachedEmbeddings(opts): Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;  Retrieves cached embeddings based on the specified query parameters.  Parameters​  Name\tType\tDescriptionopts\tObject\tAn object containing parameters for the embedding retrieval. opts.query_field_name\tstring\t- opts.query_field_sub_name\tstring\t- opts.query_input\tstring\t- opts.query_match_count\tnumber\t- opts.query_table_name\tstring\t- opts.query_threshold\tnumber\t-  Returns​  Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;  A Promise that resolves to an array of objects containing embeddings and levenshtein scores.  Overrides​  DatabaseAdapter.getCachedEmbeddings    ","version":"Next","tagName":"h3"},{"title":"getGoals​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getgoals","content":" ▸ getGoals(params): Promise&lt;Goal[]&gt;  Retrieves goals based on specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for goal retrieval. params.count?\tnumber\t- params.onlyInProgress?\tboolean\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.user_id?\tnull | `${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Goal[]&gt;  A Promise that resolves to an array of Goal objects.  Overrides​  DatabaseAdapter.getGoals    ","version":"Next","tagName":"h3"},{"title":"getMemories​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getmemories","content":" ▸ getMemories(params): Promise&lt;Memory[]&gt;  Retrieves memories based on the specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the memory retrieval. params.count?\tnumber\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique?\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.getMemories    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForAccount​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getparticipantsforaccount","content":" ▸ getParticipantsForAccount(user_id): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the account.  Returns​  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  Overrides​  DatabaseAdapter.getParticipantsForAccount    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForRoom​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getparticipantsforroom","content":" ▸ getParticipantsForRoom(room_id): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves participants for a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room for which to retrieve participants.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of UUIDs representing the participants.  Overrides​  DatabaseAdapter.getParticipantsForRoom    ","version":"Next","tagName":"h3"},{"title":"getRelationship​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getrelationship","content":" ▸ getRelationship(params): Promise&lt;null | Relationship&gt;  Retrieves a relationship between two users if it exists.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUIDs of the two users (userA and userB). params.userA\t`${string}-${string}-${string}-${string}-${string}`\t- params.userB\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;null | Relationship&gt;  A Promise that resolves to the Relationship object or null if not found.  Overrides​  DatabaseAdapter.getRelationship    ","version":"Next","tagName":"h3"},{"title":"getRelationships​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getrelationships","content":" ▸ getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific user.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUID of the user. params.user_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Relationship[]&gt;  A Promise that resolves to an array of Relationship objects.  Overrides​  DatabaseAdapter.getRelationships    ","version":"Next","tagName":"h3"},{"title":"getRoom​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getroom","content":" ▸ getRoom(room_id): Promise&lt;null | `${string}-${string}-${string}-${string}-${string}`&gt;  Retrieves the room ID for a given room, if it exists.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to retrieve.  Returns​  Promise&lt;null | `${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the room ID or null if not found.  Overrides​  DatabaseAdapter.getRoom    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipant​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getroomsforparticipant","content":" ▸ getRoomsForParticipant(user_id): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which a specific user is a participant.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipant    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipants​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#getroomsforparticipants","content":" ▸ getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which specific users are participants.  Parameters​  Name\tType\tDescriptionuserIds\t`${string}-${string}-${string}-${string}-${string}`[]\tAn array of UUIDs of the users.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipants    ","version":"Next","tagName":"h3"},{"title":"log​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#log","content":" ▸ log(params): Promise&lt;void&gt;  Logs an event or action with the specified details.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the log entry. params.body\tObject\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.type\tstring\t- params.user_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;void&gt;  A Promise that resolves when the log entry has been saved.  Overrides​  DatabaseAdapter.log    ","version":"Next","tagName":"h3"},{"title":"removeAllGoals​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#removeallgoals","content":" ▸ removeAllGoals(room_id): Promise&lt;void&gt;  Removes all goals associated with a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room whose goals should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all goals have been removed.  Overrides​  DatabaseAdapter.removeAllGoals    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#removeallmemories","content":" ▸ removeAllMemories(room_id, tableName): Promise&lt;void&gt;  Removes all memories associated with a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room whose memories should be removed. tableName\tstring\tThe table from which the memories should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Overrides​  DatabaseAdapter.removeAllMemories    ","version":"Next","tagName":"h3"},{"title":"removeGoal​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#removegoal","content":" ▸ removeGoal(goalId): Promise&lt;void&gt;  Removes a specific goal from the database.  Parameters​  Name\tType\tDescriptiongoalId\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the goal to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been removed.  Overrides​  DatabaseAdapter.removeGoal    ","version":"Next","tagName":"h3"},{"title":"removeMemory​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#removememory","content":" ▸ removeMemory(memoryId, tableName): Promise&lt;void&gt;  Removes a specific memory from the database.  Parameters​  Name\tType\tDescriptionmemoryId\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the memory to remove. tableName\tstring\tThe table from which the memory should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been removed.  Overrides​  DatabaseAdapter.removeMemory    ","version":"Next","tagName":"h3"},{"title":"removeParticipant​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#removeparticipant","content":" ▸ removeParticipant(user_id, room_id): Promise&lt;boolean&gt;  Removes a user as a participant from a specific room.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user to remove as a participant. room_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room from which the user will be removed.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.removeParticipant    ","version":"Next","tagName":"h3"},{"title":"removeRoom​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#removeroom","content":" ▸ removeRoom(room_id): Promise&lt;void&gt;  Removes a specific room from the database.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the room has been removed.  Overrides​  DatabaseAdapter.removeRoom    ","version":"Next","tagName":"h3"},{"title":"searchMemories​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#searchmemories","content":" ▸ searchMemories(params): Promise&lt;Memory[]&gt;  Searches for memories based on embeddings and other specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the memory search. params.embedding\tnumber[]\t- params.match_count\tnumber\t- params.match_threshold\tnumber\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemories    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#searchmemoriesbyembedding","content":" ▸ searchMemoriesByEmbedding(embedding, params): Promise&lt;Memory[]&gt;  Searches for memories by embedding and other specified parameters.  Parameters​  Name\tType\tDescriptionembedding\tnumber[]\tThe embedding vector to search with. params\tObject\tAdditional parameters for the search. params.count?\tnumber\t- params.match_threshold?\tnumber\t- params.room_id?\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique?\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemoriesByEmbedding    ","version":"Next","tagName":"h3"},{"title":"updateGoal​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#updategoal","content":" ▸ updateGoal(goal): Promise&lt;void&gt;  Updates a specific goal in the database.  Parameters​  Name\tType\tDescriptiongoal\tGoal\tThe goal object with updated properties.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been updated.  Overrides​  DatabaseAdapter.updateGoal    ","version":"Next","tagName":"h3"},{"title":"updateGoalStatus​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter#updategoalstatus","content":" ▸ updateGoalStatus(params): Promise&lt;void&gt;  Updates the status of a specific goal.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the goalId and the new status. params.goalId\t`${string}-${string}-${string}-${string}-${string}`\t- params.status\tGoalStatus\t-  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal status has been updated.  Overrides​  DatabaseAdapter.updateGoalStatus ","version":"Next","tagName":"h3"},{"title":"Class: SqlJsDatabaseAdapter","type":0,"sectionRef":"#","url":"/eliza/api/classes/SqlJsDatabaseAdapter","content":"","keywords":"","version":"Next"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#hierarchy","content":" DatabaseAdapter ↳ SqlJsDatabaseAdapter  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#constructor","content":" • new SqlJsDatabaseAdapter(db): SqlJsDatabaseAdapter  Parameters​  Name\tTypedb\tDatabase  Returns​  SqlJsDatabaseAdapter  Overrides​  DatabaseAdapter.constructor  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#properties","content":" ","version":"Next","tagName":"h2"},{"title":"db​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#db","content":" • db: Database  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#methods","content":" ","version":"Next","tagName":"h2"},{"title":"addParticipant​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#addparticipant","content":" ▸ addParticipant(user_id, room_id): Promise&lt;boolean&gt;  Adds a user as a participant to a specific room.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user to add as a participant. room_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to which the user will be added.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.addParticipant    ","version":"Next","tagName":"h3"},{"title":"countMemories​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#countmemories","content":" ▸ countMemories(room_id, unique?, tableName?): Promise&lt;number&gt;  Counts the number of memories in a specific room.  Parameters​  Name\tType\tDefault value\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tundefined\tThe UUID of the room for which to count memories. unique\tboolean\ttrue\tSpecifies whether to count only unique memories. tableName\tstring\t&quot;&quot;\tOptional table name to count memories from.  Returns​  Promise&lt;number&gt;  A Promise that resolves to the number of memories.  Overrides​  DatabaseAdapter.countMemories    ","version":"Next","tagName":"h3"},{"title":"createAccount​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#createaccount","content":" ▸ createAccount(account): Promise&lt;boolean&gt;  Creates a new account in the database.  Parameters​  Name\tType\tDescriptionaccount\tAccount\tThe account object to create.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves when the account creation is complete.  Overrides​  DatabaseAdapter.createAccount    ","version":"Next","tagName":"h3"},{"title":"createGoal​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#creategoal","content":" ▸ createGoal(goal): Promise&lt;void&gt;  Creates a new goal in the database.  Parameters​  Name\tType\tDescriptiongoal\tGoal\tThe goal object to create.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been created.  Overrides​  DatabaseAdapter.createGoal    ","version":"Next","tagName":"h3"},{"title":"createMemory​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#creatememory","content":" ▸ createMemory(memory, tableName): Promise&lt;void&gt;  Creates a new memory in the database.  Parameters​  Name\tType\tDescriptionmemory\tMemory\tThe memory object to create. tableName\tstring\tThe table where the memory should be stored.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been created.  Overrides​  DatabaseAdapter.createMemory    ","version":"Next","tagName":"h3"},{"title":"createRelationship​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#createrelationship","content":" ▸ createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two users.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUIDs of the two users (userA and userB). params.userA\t`${string}-${string}-${string}-${string}-${string}`\t- params.userB\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Overrides​  DatabaseAdapter.createRelationship    ","version":"Next","tagName":"h3"},{"title":"createRoom​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#createroom","content":" ▸ createRoom(room_id?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new room with an optional specified ID.  Parameters​  Name\tType\tDescriptionroom_id?\t`${string}-${string}-${string}-${string}-${string}`\tOptional UUID to assign to the new room.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the UUID of the created room.  Overrides​  DatabaseAdapter.createRoom    ","version":"Next","tagName":"h3"},{"title":"getAccountById​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getaccountbyid","content":" ▸ getAccountById(user_id): Promise&lt;null | Account&gt;  Retrieves an account by its ID.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user account to retrieve.  Returns​  Promise&lt;null | Account&gt;  A Promise that resolves to the Account object or null if not found.  Overrides​  DatabaseAdapter.getAccountById    ","version":"Next","tagName":"h3"},{"title":"getActorDetails​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getactordetails","content":" ▸ getActorDetails(params): Promise&lt;Actor[]&gt;  Retrieves details of actors in a given room.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the room_id to search for actors. params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Actor[]&gt;  A Promise that resolves to an array of Actor objects.  Overrides​  DatabaseAdapter.getActorDetails    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getcachedembeddings","content":" ▸ getCachedEmbeddings(opts): Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;  Retrieves cached embeddings based on the specified query parameters.  Parameters​  Name\tType\tDescriptionopts\tObject\tAn object containing parameters for the embedding retrieval. opts.query_field_name\tstring\t- opts.query_field_sub_name\tstring\t- opts.query_input\tstring\t- opts.query_match_count\tnumber\t- opts.query_table_name\tstring\t- opts.query_threshold\tnumber\t-  Returns​  Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;  A Promise that resolves to an array of objects containing embeddings and levenshtein scores.  Overrides​  DatabaseAdapter.getCachedEmbeddings    ","version":"Next","tagName":"h3"},{"title":"getGoals​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getgoals","content":" ▸ getGoals(params): Promise&lt;Goal[]&gt;  Retrieves goals based on specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for goal retrieval. params.count?\tnumber\t- params.onlyInProgress?\tboolean\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.user_id?\tnull | `${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Goal[]&gt;  A Promise that resolves to an array of Goal objects.  Overrides​  DatabaseAdapter.getGoals    ","version":"Next","tagName":"h3"},{"title":"getMemories​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getmemories","content":" ▸ getMemories(params): Promise&lt;Memory[]&gt;  Retrieves memories based on the specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the memory retrieval. params.count?\tnumber\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique?\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.getMemories    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForAccount​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getparticipantsforaccount","content":" ▸ getParticipantsForAccount(user_id): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the account.  Returns​  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  Overrides​  DatabaseAdapter.getParticipantsForAccount    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForRoom​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getparticipantsforroom","content":" ▸ getParticipantsForRoom(room_id): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves participants for a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room for which to retrieve participants.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of UUIDs representing the participants.  Overrides​  DatabaseAdapter.getParticipantsForRoom    ","version":"Next","tagName":"h3"},{"title":"getRelationship​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getrelationship","content":" ▸ getRelationship(params): Promise&lt;null | Relationship&gt;  Retrieves a relationship between two users if it exists.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUIDs of the two users (userA and userB). params.userA\t`${string}-${string}-${string}-${string}-${string}`\t- params.userB\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;null | Relationship&gt;  A Promise that resolves to the Relationship object or null if not found.  Overrides​  DatabaseAdapter.getRelationship    ","version":"Next","tagName":"h3"},{"title":"getRelationships​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getrelationships","content":" ▸ getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific user.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUID of the user. params.user_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Relationship[]&gt;  A Promise that resolves to an array of Relationship objects.  Overrides​  DatabaseAdapter.getRelationships    ","version":"Next","tagName":"h3"},{"title":"getRoom​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getroom","content":" ▸ getRoom(room_id): Promise&lt;null | `${string}-${string}-${string}-${string}-${string}`&gt;  Retrieves the room ID for a given room, if it exists.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to retrieve.  Returns​  Promise&lt;null | `${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the room ID or null if not found.  Overrides​  DatabaseAdapter.getRoom    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipant​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getroomsforparticipant","content":" ▸ getRoomsForParticipant(user_id): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which a specific user is a participant.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipant    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipants​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#getroomsforparticipants","content":" ▸ getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which specific users are participants.  Parameters​  Name\tType\tDescriptionuserIds\t`${string}-${string}-${string}-${string}-${string}`[]\tAn array of UUIDs of the users.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipants    ","version":"Next","tagName":"h3"},{"title":"log​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#log","content":" ▸ log(params): Promise&lt;void&gt;  Logs an event or action with the specified details.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the log entry. params.body\tObject\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.type\tstring\t- params.user_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;void&gt;  A Promise that resolves when the log entry has been saved.  Overrides​  DatabaseAdapter.log    ","version":"Next","tagName":"h3"},{"title":"removeAllGoals​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#removeallgoals","content":" ▸ removeAllGoals(room_id): Promise&lt;void&gt;  Removes all goals associated with a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room whose goals should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all goals have been removed.  Overrides​  DatabaseAdapter.removeAllGoals    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#removeallmemories","content":" ▸ removeAllMemories(room_id, tableName): Promise&lt;void&gt;  Removes all memories associated with a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room whose memories should be removed. tableName\tstring\tThe table from which the memories should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Overrides​  DatabaseAdapter.removeAllMemories    ","version":"Next","tagName":"h3"},{"title":"removeGoal​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#removegoal","content":" ▸ removeGoal(goalId): Promise&lt;void&gt;  Removes a specific goal from the database.  Parameters​  Name\tType\tDescriptiongoalId\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the goal to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been removed.  Overrides​  DatabaseAdapter.removeGoal    ","version":"Next","tagName":"h3"},{"title":"removeMemory​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#removememory","content":" ▸ removeMemory(memoryId, tableName): Promise&lt;void&gt;  Removes a specific memory from the database.  Parameters​  Name\tType\tDescriptionmemoryId\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the memory to remove. tableName\tstring\tThe table from which the memory should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been removed.  Overrides​  DatabaseAdapter.removeMemory    ","version":"Next","tagName":"h3"},{"title":"removeParticipant​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#removeparticipant","content":" ▸ removeParticipant(user_id, room_id): Promise&lt;boolean&gt;  Removes a user as a participant from a specific room.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user to remove as a participant. room_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room from which the user will be removed.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.removeParticipant    ","version":"Next","tagName":"h3"},{"title":"removeRoom​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#removeroom","content":" ▸ removeRoom(room_id): Promise&lt;void&gt;  Removes a specific room from the database.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the room has been removed.  Overrides​  DatabaseAdapter.removeRoom    ","version":"Next","tagName":"h3"},{"title":"searchMemories​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#searchmemories","content":" ▸ searchMemories(params): Promise&lt;Memory[]&gt;  Searches for memories based on embeddings and other specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the memory search. params.embedding\tnumber[]\t- params.match_count\tnumber\t- params.match_threshold\tnumber\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemories    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#searchmemoriesbyembedding","content":" ▸ searchMemoriesByEmbedding(_embedding, params): Promise&lt;Memory[]&gt;  Searches for memories by embedding and other specified parameters.  Parameters​  Name\tType\tDescription_embedding\tnumber[]\tThe embedding vector to search with. params\tObject\tAdditional parameters for the search. params.count?\tnumber\t- params.match_threshold?\tnumber\t- params.room_id?\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique?\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemoriesByEmbedding    ","version":"Next","tagName":"h3"},{"title":"updateGoal​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#updategoal","content":" ▸ updateGoal(goal): Promise&lt;void&gt;  Updates a specific goal in the database.  Parameters​  Name\tType\tDescriptiongoal\tGoal\tThe goal object with updated properties.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been updated.  Overrides​  DatabaseAdapter.updateGoal    ","version":"Next","tagName":"h3"},{"title":"updateGoalStatus​","type":1,"pageTitle":"Class: SqlJsDatabaseAdapter","url":"/eliza/api/classes/SqlJsDatabaseAdapter#updategoalstatus","content":" ▸ updateGoalStatus(params): Promise&lt;void&gt;  Updates the status of a specific goal.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the goalId and the new status. params.goalId\t`${string}-${string}-${string}-${string}-${string}`\t- params.status\tGoalStatus\t-  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal status has been updated.  Overrides​  DatabaseAdapter.updateGoalStatus ","version":"Next","tagName":"h3"},{"title":"Class: SupabaseDatabaseAdapter","type":0,"sectionRef":"#","url":"/eliza/api/classes/SupabaseDatabaseAdapter","content":"","keywords":"","version":"Next"},{"title":"Hierarchy​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#hierarchy","content":" DatabaseAdapter ↳ SupabaseDatabaseAdapter  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"constructor​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#constructor","content":" • new SupabaseDatabaseAdapter(supabaseUrl, supabaseKey): SupabaseDatabaseAdapter  Parameters​  Name\tTypesupabaseUrl\tstring supabaseKey\tstring  Returns​  SupabaseDatabaseAdapter  Overrides​  DatabaseAdapter.constructor  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#properties","content":" ","version":"Next","tagName":"h2"},{"title":"supabase​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#supabase","content":" • supabase: default&lt;any, &quot;public&quot;, any&gt;  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#methods","content":" ","version":"Next","tagName":"h2"},{"title":"addParticipant​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#addparticipant","content":" ▸ addParticipant(user_id, room_id): Promise&lt;boolean&gt;  Adds a user as a participant to a specific room.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user to add as a participant. room_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to which the user will be added.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.addParticipant    ","version":"Next","tagName":"h3"},{"title":"countMemories​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#countmemories","content":" ▸ countMemories(room_id, unique?, tableName): Promise&lt;number&gt;  Counts the number of memories in a specific room.  Parameters​  Name\tType\tDefault value\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tundefined\tThe UUID of the room for which to count memories. unique\tboolean\ttrue\tSpecifies whether to count only unique memories. tableName\tstring\tundefined\tOptional table name to count memories from.  Returns​  Promise&lt;number&gt;  A Promise that resolves to the number of memories.  Overrides​  DatabaseAdapter.countMemories    ","version":"Next","tagName":"h3"},{"title":"createAccount​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#createaccount","content":" ▸ createAccount(account): Promise&lt;boolean&gt;  Creates a new account in the database.  Parameters​  Name\tType\tDescriptionaccount\tAccount\tThe account object to create.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves when the account creation is complete.  Overrides​  DatabaseAdapter.createAccount    ","version":"Next","tagName":"h3"},{"title":"createGoal​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#creategoal","content":" ▸ createGoal(goal): Promise&lt;void&gt;  Creates a new goal in the database.  Parameters​  Name\tType\tDescriptiongoal\tGoal\tThe goal object to create.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been created.  Overrides​  DatabaseAdapter.createGoal    ","version":"Next","tagName":"h3"},{"title":"createMemory​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#creatememory","content":" ▸ createMemory(memory, tableName, unique?): Promise&lt;void&gt;  Creates a new memory in the database.  Parameters​  Name\tType\tDefault value\tDescriptionmemory\tMemory\tundefined\tThe memory object to create. tableName\tstring\tundefined\tThe table where the memory should be stored. unique\tboolean\tfalse\tIndicates if the memory should be unique.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been created.  Overrides​  DatabaseAdapter.createMemory    ","version":"Next","tagName":"h3"},{"title":"createRelationship​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#createrelationship","content":" ▸ createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two users.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUIDs of the two users (userA and userB). params.userA\t`${string}-${string}-${string}-${string}-${string}`\t- params.userB\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Overrides​  DatabaseAdapter.createRelationship    ","version":"Next","tagName":"h3"},{"title":"createRoom​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#createroom","content":" ▸ createRoom(room_id?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new room with an optional specified ID.  Parameters​  Name\tType\tDescriptionroom_id?\t`${string}-${string}-${string}-${string}-${string}`\tOptional UUID to assign to the new room.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the UUID of the created room.  Overrides​  DatabaseAdapter.createRoom    ","version":"Next","tagName":"h3"},{"title":"getAccountById​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getaccountbyid","content":" ▸ getAccountById(user_id): Promise&lt;null | Account&gt;  Retrieves an account by its ID.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user account to retrieve.  Returns​  Promise&lt;null | Account&gt;  A Promise that resolves to the Account object or null if not found.  Overrides​  DatabaseAdapter.getAccountById    ","version":"Next","tagName":"h3"},{"title":"getActorDetails​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getactordetails","content":" ▸ getActorDetails(params): Promise&lt;Actor[]&gt;  Retrieves details of actors in a given room.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the room_id to search for actors. params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Actor[]&gt;  A Promise that resolves to an array of Actor objects.  Overrides​  DatabaseAdapter.getActorDetails    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getcachedembeddings","content":" ▸ getCachedEmbeddings(opts): Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;  Retrieves cached embeddings based on the specified query parameters.  Parameters​  Name\tType\tDescriptionopts\tObject\tAn object containing parameters for the embedding retrieval. opts.query_field_name\tstring\t- opts.query_field_sub_name\tstring\t- opts.query_input\tstring\t- opts.query_match_count\tnumber\t- opts.query_table_name\tstring\t- opts.query_threshold\tnumber\t-  Returns​  Promise&lt;{ embedding: number[] ; levenshtein_score: number }[]&gt;  A Promise that resolves to an array of objects containing embeddings and levenshtein scores.  Overrides​  DatabaseAdapter.getCachedEmbeddings    ","version":"Next","tagName":"h3"},{"title":"getGoals​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getgoals","content":" ▸ getGoals(params): Promise&lt;Goal[]&gt;  Retrieves goals based on specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for goal retrieval. params.count?\tnumber\t- params.onlyInProgress?\tboolean\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.user_id?\tnull | `${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Goal[]&gt;  A Promise that resolves to an array of Goal objects.  Overrides​  DatabaseAdapter.getGoals    ","version":"Next","tagName":"h3"},{"title":"getMemories​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getmemories","content":" ▸ getMemories(params): Promise&lt;Memory[]&gt;  Retrieves memories based on the specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the memory retrieval. params.count?\tnumber\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique?\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.getMemories    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForAccount​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getparticipantsforaccount","content":" ▸ getParticipantsForAccount(user_id): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the account.  Returns​  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  Overrides​  DatabaseAdapter.getParticipantsForAccount    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForRoom​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getparticipantsforroom","content":" ▸ getParticipantsForRoom(room_id): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves participants for a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room for which to retrieve participants.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of UUIDs representing the participants.  Overrides​  DatabaseAdapter.getParticipantsForRoom    ","version":"Next","tagName":"h3"},{"title":"getRelationship​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getrelationship","content":" ▸ getRelationship(params): Promise&lt;null | Relationship&gt;  Retrieves a relationship between two users if it exists.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUIDs of the two users (userA and userB). params.userA\t`${string}-${string}-${string}-${string}-${string}`\t- params.userB\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;null | Relationship&gt;  A Promise that resolves to the Relationship object or null if not found.  Overrides​  DatabaseAdapter.getRelationship    ","version":"Next","tagName":"h3"},{"title":"getRelationships​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getrelationships","content":" ▸ getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific user.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the UUID of the user. params.user_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;Relationship[]&gt;  A Promise that resolves to an array of Relationship objects.  Overrides​  DatabaseAdapter.getRelationships    ","version":"Next","tagName":"h3"},{"title":"getRoom​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getroom","content":" ▸ getRoom(room_id): Promise&lt;null | `${string}-${string}-${string}-${string}-${string}`&gt;  Retrieves the room ID for a given room, if it exists.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to retrieve.  Returns​  Promise&lt;null | `${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the room ID or null if not found.  Overrides​  DatabaseAdapter.getRoom    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipant​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getroomsforparticipant","content":" ▸ getRoomsForParticipant(user_id): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which a specific user is a participant.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipant    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipants​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#getroomsforparticipants","content":" ▸ getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which specific users are participants.  Parameters​  Name\tType\tDescriptionuserIds\t`${string}-${string}-${string}-${string}-${string}`[]\tAn array of UUIDs of the users.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipants    ","version":"Next","tagName":"h3"},{"title":"log​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#log","content":" ▸ log(params): Promise&lt;void&gt;  Logs an event or action with the specified details.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the log entry. params.body\tObject\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.type\tstring\t- params.user_id\t`${string}-${string}-${string}-${string}-${string}`\t-  Returns​  Promise&lt;void&gt;  A Promise that resolves when the log entry has been saved.  Overrides​  DatabaseAdapter.log    ","version":"Next","tagName":"h3"},{"title":"removeAllGoals​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#removeallgoals","content":" ▸ removeAllGoals(room_id): Promise&lt;void&gt;  Removes all goals associated with a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room whose goals should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all goals have been removed.  Overrides​  DatabaseAdapter.removeAllGoals    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#removeallmemories","content":" ▸ removeAllMemories(room_id, tableName): Promise&lt;void&gt;  Removes all memories associated with a specific room.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room whose memories should be removed. tableName\tstring\tThe table from which the memories should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Overrides​  DatabaseAdapter.removeAllMemories    ","version":"Next","tagName":"h3"},{"title":"removeGoal​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#removegoal","content":" ▸ removeGoal(goalId): Promise&lt;void&gt;  Removes a specific goal from the database.  Parameters​  Name\tType\tDescriptiongoalId\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the goal to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been removed.  Overrides​  DatabaseAdapter.removeGoal    ","version":"Next","tagName":"h3"},{"title":"removeMemory​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#removememory","content":" ▸ removeMemory(memoryId): Promise&lt;void&gt;  Removes a specific memory from the database.  Parameters​  Name\tType\tDescriptionmemoryId\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the memory to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been removed.  Overrides​  DatabaseAdapter.removeMemory    ","version":"Next","tagName":"h3"},{"title":"removeParticipant​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#removeparticipant","content":" ▸ removeParticipant(user_id, room_id): Promise&lt;boolean&gt;  Removes a user as a participant from a specific room.  Parameters​  Name\tType\tDescriptionuser_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the user to remove as a participant. room_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room from which the user will be removed.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.removeParticipant    ","version":"Next","tagName":"h3"},{"title":"removeRoom​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#removeroom","content":" ▸ removeRoom(room_id): Promise&lt;void&gt;  Removes a specific room from the database.  Parameters​  Name\tType\tDescriptionroom_id\t`${string}-${string}-${string}-${string}-${string}`\tThe UUID of the room to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the room has been removed.  Overrides​  DatabaseAdapter.removeRoom    ","version":"Next","tagName":"h3"},{"title":"searchMemories​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#searchmemories","content":" ▸ searchMemories(params): Promise&lt;Memory[]&gt;  Searches for memories based on embeddings and other specified parameters.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing parameters for the memory search. params.embedding\tnumber[]\t- params.match_count\tnumber\t- params.match_threshold\tnumber\t- params.room_id\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemories    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#searchmemoriesbyembedding","content":" ▸ searchMemoriesByEmbedding(embedding, params): Promise&lt;Memory[]&gt;  Searches for memories by embedding and other specified parameters.  Parameters​  Name\tType\tDescriptionembedding\tnumber[]\tThe embedding vector to search with. params\tObject\tAdditional parameters for the search. params.count?\tnumber\t- params.match_threshold?\tnumber\t- params.room_id?\t`${string}-${string}-${string}-${string}-${string}`\t- params.tableName\tstring\t- params.unique?\tboolean\t-  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemoriesByEmbedding    ","version":"Next","tagName":"h3"},{"title":"updateGoal​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#updategoal","content":" ▸ updateGoal(goal): Promise&lt;void&gt;  Updates a specific goal in the database.  Parameters​  Name\tType\tDescriptiongoal\tGoal\tThe goal object with updated properties.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been updated.  Overrides​  DatabaseAdapter.updateGoal    ","version":"Next","tagName":"h3"},{"title":"updateGoalStatus​","type":1,"pageTitle":"Class: SupabaseDatabaseAdapter","url":"/eliza/api/classes/SupabaseDatabaseAdapter#updategoalstatus","content":" ▸ updateGoalStatus(params): Promise&lt;void&gt;  Updates the status of a specific goal.  Parameters​  Name\tType\tDescriptionparams\tObject\tAn object containing the goalId and the new status. params.goalId\t`${string}-${string}-${string}-${string}-${string}`\t- params.status\tGoalStatus\t-  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal status has been updated.  Overrides​  DatabaseAdapter.updateGoalStatus ","version":"Next","tagName":"h3"},{"title":"Quickstart","type":0,"sectionRef":"#","url":"/eliza/docs/quickstart","content":"","keywords":"","version":"Next"},{"title":"Install Node.js​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#install-nodejs","content":" https://docs.npmjs.com/downloading-and-installing-node-js-and-npm  ","version":"Next","tagName":"h2"},{"title":"Using pnpm​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#using-pnpm","content":" We use pnpm to manage our dependencies. It is faster and more efficient than npm, and it supports workspaces.https://pnpm.io/installation  ","version":"Next","tagName":"h2"},{"title":"Edit the .env file​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#edit-the-env-file","content":" Copy .env.example to .env and fill in the appropriate valuesEdit the TWITTER environment variables to add your bot's username and password  ","version":"Next","tagName":"h2"},{"title":"Edit the character file​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#edit-the-character-file","content":" Check out the file src/core/defaultCharacter.ts - you can modify thisYou can also load characters with the node --loader ts-node/esm src/index.ts --characters=&quot;path/to/your/character.json&quot; and run multiple bots at the same time.  ","version":"Next","tagName":"h2"},{"title":"Run with Llama​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#run-with-llama","content":" You can run Llama 70B or 405B models by setting the XAI_MODEL environment variable to meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo or meta-llama/Meta-Llama-3.1-405B-Instruct  ","version":"Next","tagName":"h3"},{"title":"Run with Grok​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#run-with-grok","content":" You can run Grok models by setting the XAI_MODEL environment variable to grok-beta  ","version":"Next","tagName":"h3"},{"title":"Run with OpenAI​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#run-with-openai","content":" You can run OpenAI models by setting the XAI_MODEL environment variable to gpt-4o-mini or gpt-4o  Requires Node 20+  If you are getting strange issues when starting up, make sure you're using Node 20+. Some APIs are not compatible with previous versions. You can check your node version with node -v. If you need to install a new version of node, we recommend using nvm.  ","version":"Next","tagName":"h3"},{"title":"Additional Requirements​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#additional-requirements","content":" You may need to install Sharp. If you see an error when starting up, try installing it with the following command:  pnpm install --include=optional sharp   Environment Setup  You will need to add environment variables to your .env file to connect to various platforms:  # Required environment variables # Start Discord DISCORD_APPLICATION_ID= DISCORD_API_TOKEN= # Bot token # Start Twitter TWITTER_USERNAME= # Account username TWITTER_PASSWORD= # Account password TWITTER_EMAIL= # Account email TWITTER_COOKIES= # Account cookies   Local Setup  ","version":"Next","tagName":"h2"},{"title":"CUDA Setup​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#cuda-setup","content":" If you have an NVIDIA GPU, you can install CUDA to speed up local inference dramatically.  pnpm install npx --no node-llama-cpp source download --gpu cuda   Make sure that you've installed the CUDA Toolkit, including cuDNN and cuBLAS.  ","version":"Next","tagName":"h2"},{"title":"Running locally​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart#running-locally","content":" Add XAI_MODEL and set it to one of the above options from Run with Llama - you can leave X_SERVER_URL and XAI_API_KEY blank, it downloads the model from huggingface and queries it locally  Cloud Setup (with OpenAI)  In addition to the environment variables above, you will need to add the following:  # OpenAI handles the bulk of the work with chat, TTS, image recognition, etc. OPENAI_API_KEY=sk-* # OpenAI API key, starting with sk- # The agent can also ask Claude for help if you have an API key ANTHROPIC_API_KEY= # For Elevenlabs voice generation on Discord voice ELEVENLABS_XI_API_KEY= # API key from elevenlabs # ELEVENLABS SETTINGS ELEVENLABS_MODEL_ID=eleven_multilingual_v2 ELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM ELEVENLABS_VOICE_STABILITY=0.5 ELEVENLABS_VOICE_SIMILARITY_BOOST=0.9 ELEVENLABS_VOICE_STYLE=0.66 ELEVENLABS_VOICE_USE_SPEAKER_BOOST=false ELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4 ELEVENLABS_OUTPUT_FORMAT=pcm_16000   Discord Bot  For help with setting up your Discord Bot, check out here: https://discordjs.guide/preparations/setting-up-a-bot-application.html ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}